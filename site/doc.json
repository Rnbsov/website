[
  {
    "kind": "class",
    "name": "Bot",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
      "line": 134,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "This is the single most important class of grammY. It represents your bot.\n\nFirst, you must create a bot by talking to @BotFather, check out\nhttps://t.me/BotFather. Once it is ready, you obtain a secret token for your\nbot. grammY will use that token to identify as your bot when talking to the\nTelegram servers. Got the token? You are now ready to write some code and run\nyour bot!\n\nYou should do three things to run your bot:\n```ts\n// 1. Create a bot instance\nconst bot = new Bot('<secret-token>')\n// 2. Listen for updates\nbot.on('message:text', ctx => ctx.reply('You wrote: ' + ctx.message.text))\n// 3. Launch it!\nbot.start()\n```"
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": {
            "doc": "Creates a new Bot with the given token.\n\nRemember that you can listen for messages by calling\n```ts\nbot.on('message', ctx => { ... })\n```\nor similar methods.\n\nThe simplest way to start your bot is via simple long polling:\n```ts\nbot.start()\n```\n",
            "tags": [
              {
                "kind": "param",
                "name": "token",
                "doc": "The bot's token as acquired from https://t.me/BotFather"
              },
              {
                "kind": "param",
                "name": "config",
                "doc": "Optional configuration properties for the bot"
              }
            ]
          },
          "accessibility": null,
          "hasBody": true,
          "name": "constructor",
          "params": [
            {
              "accessibility": "public",
              "kind": "identifier",
              "name": "token",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "readonly": true
            },
            {
              "kind": "identifier",
              "name": "config",
              "optional": true,
              "tsType": {
                "repr": "BotConfig",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "C",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "C"
                      }
                    }
                  ],
                  "typeName": "BotConfig"
                }
              }
            }
          ],
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 202,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": false,
          "accessibility": "private",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "pollingRunning",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 138,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "AbortController",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "AbortController"
                }
              },
              {
                "repr": "undefined",
                "kind": "keyword",
                "keyword": "undefined"
              }
            ]
          },
          "readonly": false,
          "accessibility": "private",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "pollingAbortController",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 139,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": false,
          "accessibility": "private",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "lastTriedUpdateId",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 140,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Gives you full access to the Telegram Bot API.\n```ts\n// This is how to call the Bot API methods:\nbot.api.sendMessage(chat_id, 'Hello, grammY!')\n```\n\nUse this only outside of your middleware. If you have access to `ctx`,\nthen using `ctx.api` instead of `bot.api` is preferred."
          },
          "tsType": {
            "repr": "A",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "A"
            }
          },
          "readonly": true,
          "accessibility": "public",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "api",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 152,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "UserFromGetMe",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "UserFromGetMe"
                }
              },
              {
                "repr": "undefined",
                "kind": "keyword",
                "keyword": "undefined"
              }
            ]
          },
          "readonly": false,
          "accessibility": "private",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "me",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 154,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "UserFromGetMe",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "UserFromGetMe"
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              {
                "repr": "undefined",
                "kind": "keyword",
                "keyword": "undefined"
              }
            ]
          },
          "readonly": false,
          "accessibility": "private",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "mePromise",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 155,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "ApiClientOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ApiClientOptions"
                }
              },
              {
                "repr": "undefined",
                "kind": "keyword",
                "keyword": "undefined"
              }
            ]
          },
          "readonly": true,
          "accessibility": "private",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "clientConfig",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 156,
            "col": 2
          }
        },
        {
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": true,
              "tsType": {
                "repr": "C",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "C"
                }
              },
              "params": [
                {
                  "kind": "rest",
                  "arg": {
                    "kind": "identifier",
                    "name": "args",
                    "optional": false,
                    "tsType": null
                  },
                  "tsType": {
                    "repr": "ConstructorParameters",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Context",
                          "kind": "typeQuery",
                          "typeQuery": "Context"
                        }
                      ],
                      "typeName": "ConstructorParameters"
                    }
                  }
                }
              ],
              "typeParams": []
            }
          },
          "readonly": true,
          "accessibility": "private",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "ContextConstructor",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 158,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Used to log a warning if some update types are not in allowed_updates"
          },
          "tsType": {
            "repr": "Set",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              ],
              "typeName": "Set"
            }
          },
          "readonly": false,
          "accessibility": "private",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "observedUpdateTypes",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 163,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Holds the bot's error handler that is invoked whenever middleware throws\n(rejects). If you set your own error handler via `bot.catch`, all that\nhappens is that this variable is assigned."
          },
          "tsType": {
            "repr": "ErrorHandler",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "C",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "C"
                  }
                }
              ],
              "typeName": "ErrorHandler"
            }
          },
          "readonly": false,
          "accessibility": "public",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "errorHandler",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 170,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": {
            "doc": "Information about the bot itself as retrieved from `api.getMe()`. Only\navailable after the bot has been initialized via `await bot.init()`, or\nafter the value has been set manually.\n\nStarting the bot will always perform the initialization automatically,\nunless a manual value is already set.\n\nNote that the recommended way to set a custom bot information object is\nto pass it to the configuration object of the `new Bot()` instantiation,\nrather than assigning this property."
          },
          "accessibility": "public",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "botInfo",
          "kind": "setter",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "botInfo",
                "optional": false,
                "tsType": {
                  "repr": "UserFromGetMe",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "UserFromGetMe"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 226,
            "col": 2
          }
        },
        {
          "accessibility": "public",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "botInfo",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "UserFromGetMe",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "UserFromGetMe"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 229,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "tags": [
              {
                "kind": "unsupported",
                "value": "@inheritdoc"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "on",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "filter",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Q",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Q"
                      }
                    },
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "Q",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Q"
                        }
                      }
                    }
                  ]
                }
              },
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "middleware",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Middleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "Filter",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "C",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "C"
                                    }
                                  },
                                  {
                                    "repr": "Q",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "Q"
                                    }
                                  }
                                ],
                                "typeName": "Filter"
                              }
                            }
                          ],
                          "typeName": "Middleware"
                        }
                      }
                    ],
                    "typeName": "Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Composer",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Filter",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "C",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "C"
                          }
                        },
                        {
                          "repr": "Q",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Q"
                          }
                        }
                      ],
                      "typeName": "Filter"
                    }
                  }
                ],
                "typeName": "Composer"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "Q",
                "constraint": {
                  "repr": "FilterQuery",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "FilterQuery"
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 241,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Checks if the bot has been initialized. A bot is initialized if the bot\ninformation is set. The bot information can either be set automatically\nby calling `bot.init`, or manually through the bot constructor. Note that\nusually, initialization is done automatically and you do not have to care\nabout this method.\n",
            "tags": [
              {
                "kind": "return",
                "doc": "true if the bot is initialized, and false otherwise"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "isInited",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 260,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Initializes the bot, i.e. fetches information about the bot itself. This\nmethod is called automatically, you usually don't have to call it\nmanually.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the initialization"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "init",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "hasBody": true,
            "isAsync": true,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 271,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Internal. Do not call. Handles an update batch sequentially by supplying\nit one-by-one to the middleware. Handles middleware errors and stores the\nlast update identifier that was being tried to handle.\n",
            "tags": [
              {
                "kind": "param",
                "name": "updates",
                "doc": "An array of updates to handle"
              }
            ]
          },
          "accessibility": "private",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "handleUpdates",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "updates",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "Update",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Update"
                    }
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "hasBody": true,
            "isAsync": true,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 297,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "This is an internal method that you probably will not ever need to call.\nIt is used whenever a new update arrives from the Telegram servers that\nyour bot will handle.\n\nIf you're writing a library on top of grammY, check out the\n[documentation](https://grammy.dev/plugins/runner.html) of the runner\nplugin for an example that uses this method.\n",
            "tags": [
              {
                "kind": "param",
                "name": "update",
                "doc": "An update from the Telegram Bot API"
              },
              {
                "kind": "param",
                "name": "webhookReplyEnvelope",
                "doc": "An optional webhook reply envelope"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "handleUpdate",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "update",
                "optional": false,
                "tsType": {
                  "repr": "Update",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Update"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "webhookReplyEnvelope",
                "optional": true,
                "tsType": {
                  "repr": "WebhookReplyEnvelope",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WebhookReplyEnvelope"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "hasBody": true,
            "isAsync": true,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 327,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Starts your bot using long polling.\n\n> This method returns a `Promise` that will never resolve except if your\n> bot is stopped. **You don't need to `await` the call to `bot.start`**,\n> but remember to catch potential errors by calling `bot.catch`.\n> Otherwise your bot will crash (and stop) if something goes wrong in\n> your code.\n\nThis method effectively enters a loop that will repeatedly call\n`getUpdates` and run your middleware for every received update, allowing\nyour bot to respond to messages.\n\nIf your bot is already running, this method does nothing.\n\n**Note that this starts your bot using a very simple long polling\nimplementation.** `bot.start` should only be used for small bots. While\nthe rest of grammY was built to perform well even under extreme loads,\nsimple long polling is not capable of scaling up in a similar fashion.\nYou should switch over to using `@grammyjs/runner` if you are running a\nbot with high load.\n\nWhat exactly _high load_ means differs from bot to bot, but as a rule of\nthumb, simple long polling should not be processing more than ~5K\nmessages every hour. Also, if your bot has long-running operations such\nas large file transfers that block the middleware from completing, this\nwill impact the responsiveness negatively, so it makes sense to use the\n`@grammyjs/runner` package even if you receive much fewer messages. If\nyou worry about how much load your bot can handle, check out the grammY\n[documentation](https://grammy.dev/advanced/scaling.html) about scaling\nup.\n",
            "tags": [
              {
                "kind": "param",
                "name": "options",
                "doc": "Options to use for simple long polling"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "start",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "PollingOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "PollingOptions"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": true,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 393,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Stops the bot from long polling.\n\nAll middleware that is currently being executed may complete, but no\nfurther `getUpdates` calls will be performed. The current `getUpdates`\nrequest will be cancelled.\n\nIn addition, this method will _confirm_ the last received update to the\nTelegram servers by calling `getUpdates` one last time with the latest\noffset value. If any updates are received in this call, they are\ndiscarded and will be fetched again when the bot starts up the next time.\nConfer the official documentation on confirming updates if you want to\nknow more: https://core.telegram.org/bots/api#getupdates\n\n> Note that this method will not wait for the middleware stack to finish.\n> If you need to run code after all middleware is done, consider waiting\n> for the promise returned by `bot.start()` to resolve."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "stop",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "hasBody": true,
            "isAsync": true,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 451,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Sets the bots error handler that is used during long polling.\n\nYou should call this method to set an error handler if you are using long\npolling, no matter whether you use `bot.start` or the `@grammyjs/runner`\npackage to run your bot.\n\nCalling `bot.catch` when using other means of running your bot (or\nwebhooks) has no effect.\n",
            "tags": [
              {
                "kind": "param",
                "name": "errorHandler",
                "doc": "A function that handles potential middleware errors"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "catch",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "errorHandler",
                "optional": false,
                "tsType": {
                  "repr": "ErrorHandler",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "C",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "C"
                        }
                      }
                    ],
                    "typeName": "ErrorHandler"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 476,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Internal. Do not call. Enters a loop that will perform long polling until\nthe bot is stopped."
          },
          "accessibility": "private",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "loop",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "PollingOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "PollingOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "hasBody": true,
            "isAsync": true,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 484,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Internal. Do not call. Reliably fetches an update batch via `getUpdates`.\nHandles all known errors. Returns `undefined` if the bot is stopped and\nthe call gets cancelled.\n",
            "tags": [
              {
                "kind": "param",
                "name": "options",
                "doc": "Polling options"
              },
              {
                "kind": "return",
                "doc": "An array of updates, or `undefined` if the bot is stopped."
              }
            ]
          },
          "accessibility": "private",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "fetchUpdates",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "limit",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "timeout",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "allowed_updates",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "PollingOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "PollingOptions"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": true,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 513,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Internal. Do not call. Handles an error that occurred during long\npolling."
          },
          "accessibility": "private",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "handlePollingError",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "error",
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": true,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 535,
            "col": 2
          }
        }
      ],
      "extends": "Composer",
      "implements": [],
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          },
          "default": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        },
        {
          "name": "A",
          "constraint": {
            "repr": "Api",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Api"
            }
          },
          "default": {
            "repr": "Api",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Api"
            }
          }
        }
      ],
      "superTypeParams": [
        {
          "repr": "C",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "C"
          }
        }
      ]
    }
  },
  {
    "kind": "interface",
    "name": "BotConfig",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
      "line": 87,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Options to pass to the bot when creating it."
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "client",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 94,
            "col": 2
          },
          "jsDoc": {
            "doc": "You can specify a number of advanced options under the `client` property.\nThe options will be passed to the grammY client—this is the part of\ngrammY that actually connects to the Telegram Bot API server in the end\nwhen making HTTP requests."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "ApiClientOptions",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "ApiClientOptions"
            }
          },
          "typeParams": []
        },
        {
          "name": "botInfo",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 105,
            "col": 2
          },
          "jsDoc": {
            "doc": "grammY automatically calls `getMe` when starting up to make sure that\nyour bot has access to the bot's own information. If you restart your bot\noften, for example because it is running in a serverless environment,\nthen you may want to skip this initial API call.\n\nSet this property of the options to pre-initialize the bot with cached\nvalues. If you use this option, grammY will not attempt to make a `getMe`\ncall but use the provided data instead."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "UserFromGetMe",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "UserFromGetMe"
            }
          },
          "typeParams": []
        },
        {
          "name": "ContextConstructor",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 110,
            "col": 2
          },
          "jsDoc": {
            "doc": "Pass the constructor of a custom context object that will be used when\ncreating the context for each incoming update."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": true,
              "tsType": {
                "repr": "C",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "C"
                }
              },
              "params": [
                {
                  "kind": "rest",
                  "arg": {
                    "kind": "identifier",
                    "name": "args",
                    "optional": false,
                    "tsType": null
                  },
                  "tsType": {
                    "repr": "ConstructorParameters",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Context",
                          "kind": "typeQuery",
                          "typeQuery": "Context"
                        }
                      ],
                      "typeName": "ConstructorParameters"
                    }
                  }
                }
              ],
              "typeParams": []
            }
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "class",
    "name": "BotError",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
      "line": 98,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "This error is thrown when middleware throws. It simply wraps the original\nerror (accessible via the `error` property), but also provides access to the\nrespective context object that was processed while the error occurred."
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "hasBody": true,
          "name": "constructor",
          "params": [
            {
              "accessibility": "public",
              "kind": "identifier",
              "name": "error",
              "optional": false,
              "tsType": {
                "repr": "unknown",
                "kind": "keyword",
                "keyword": "unknown"
              },
              "readonly": true
            },
            {
              "accessibility": "public",
              "kind": "identifier",
              "name": "ctx",
              "optional": false,
              "tsType": {
                "repr": "C",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "C"
                }
              },
              "readonly": true
            }
          ],
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 99,
            "col": 2
          }
        }
      ],
      "properties": [],
      "indexSignatures": [],
      "methods": [],
      "extends": "Error",
      "implements": [],
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          },
          "default": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ],
      "superTypeParams": []
    }
  },
  {
    "kind": "typeAlias",
    "name": "ErrorHandler",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
      "line": 80,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Error handler that can be installed on a bot to catch error thrown by\nmiddleware."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "",
        "kind": "fnOrConstructor",
        "fnOrConstructor": {
          "constructor": false,
          "tsType": {
            "repr": "unknown",
            "kind": "keyword",
            "keyword": "unknown"
          },
          "params": [
            {
              "kind": "identifier",
              "name": "error",
              "optional": false,
              "tsType": {
                "repr": "BotError",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "C",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "C"
                      }
                    }
                  ],
                  "typeName": "BotError"
                }
              }
            }
          ],
          "typeParams": []
        }
      },
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          },
          "default": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "interface",
    "name": "PollingOptions",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
      "line": 36,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Options that can be specified when running the bot via simple long polling."
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "limit",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 41,
            "col": 2
          },
          "jsDoc": {
            "doc": "Limits the number of updates to be retrieved per `getUpdates` call.\nValues between 1-100 are accepted. Defaults to 100."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "typeParams": []
        },
        {
          "name": "timeout",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 46,
            "col": 2
          },
          "jsDoc": {
            "doc": "Timeout in seconds for long polling. grammY uses 30 seconds as a default\nvalue."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "typeParams": []
        },
        {
          "name": "allowed_updates",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 59,
            "col": 2
          },
          "jsDoc": {
            "doc": "A list of the update types you want your bot to receive. For example,\nspecify [“message”, “edited_channel_post”, “callback_query”] to only\nreceive updates of these types. See Update for a complete list of\navailable update types. Specify an empty list to receive all update types\nexcept chat_member (default). If not specified, the previous setting will\nbe used.\n\nPlease note that this parameter doesn't affect updates created before the\ncall to the getUpdates, so unwanted updates may be received for a short\nperiod of time."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "ReadonlyArray",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "Exclude",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "typeOperator",
                        "typeOperator": {
                          "operator": "keyof",
                          "tsType": {
                            "repr": "Update",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Update"
                            }
                          }
                        }
                      },
                      {
                        "repr": "update_id",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "update_id"
                        }
                      }
                    ],
                    "typeName": "Exclude"
                  }
                }
              ],
              "typeName": "ReadonlyArray"
            }
          },
          "typeParams": []
        },
        {
          "name": "drop_pending_updates",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 63,
            "col": 2
          },
          "jsDoc": {
            "doc": "Pass True to drop all pending updates before starting the long polling."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "typeParams": []
        },
        {
          "name": "onStart",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/bot.ts",
            "line": 72,
            "col": 2
          },
          "jsDoc": {
            "doc": "A callback function that is useful for logging (or setting up middleware\nif you did not do this before). It will be executed after the setup of\nthe bot has completed, and immediately before the first updates are being\nfetched. The bot information `bot.botInfo` will be available when the\nfunction is run. For convenience, the callback function receives the\nvalue of `bot.botInfo` as an argument."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  }
                ]
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "botInfo",
                  "optional": false,
                  "tsType": {
                    "repr": "UserFromGetMe",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "UserFromGetMe"
                    }
                  }
                }
              ],
              "typeParams": []
            }
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "typeAlias",
    "name": "CallbackQueryContext",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/context.ts",
      "line": 2380,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Type of the context object that is available inside the handlers for\n`bot.callbackQuery`.\n\nThis helper type can be used to annotate narrow down context objects the same\nway `bot.callbackQuery` does it. This allows you to how context objects in\nmiddleware that is not directly passed to `bot.callbackQuery`, hence not\ninferring the correct type automatically. That way, handlers can be defined\nin separate files and still have the correct types."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "Filter",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "NarrowMatch",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "C",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "C"
                    }
                  },
                  {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "RegExpMatchArray",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "RegExpMatchArray"
                        }
                      }
                    ]
                  }
                ],
                "typeName": "NarrowMatch"
              }
            },
            {
              "repr": "callback_query:data",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "callback_query:data"
              }
            }
          ],
          "typeName": "Filter"
        }
      },
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "typeAlias",
    "name": "ChatTypeContext",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/context.ts",
      "line": 2446,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Type of the context object that is available inside the handlers for\n`bot.chatType`.\n\nThis helper type can be used to narrow down context objects the same way how\n`bot.chatType` does it. This allows you to annotate context objects in\nmiddleware that is not directly passed to `bot.chatType`, hence not inferring\nthe correct type automatically. That way, handlers can be defined in separate\nfiles and still have the correct types."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "",
        "kind": "intersection",
        "intersection": [
          {
            "repr": "C",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "C"
            }
          },
          {
            "repr": "ChatTypeContextCore",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "T",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "T"
                  }
                }
              ],
              "typeName": "ChatTypeContextCore"
            }
          }
        ]
      },
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        },
        {
          "name": "T",
          "constraint": {
            "repr": "",
            "kind": "indexedAccess",
            "indexedAccess": {
              "readonly": false,
              "objType": {
                "repr": "Chat",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Chat"
                }
              },
              "indexType": {
                "repr": "type",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "type"
                }
              }
            }
          }
        }
      ]
    }
  },
  {
    "kind": "typeAlias",
    "name": "CommandContext",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/context.ts",
      "line": 2360,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Type of the context object that is available inside the handlers for\n`bot.command`.\n\nThis helper type can be used to narrow down context objects the same way how\n`bot.command` does it. This allows you to annotate context objects in\nmiddleware that is not directly passed to `bot.command`, hence not inferring\nthe correct type automatically. That way, handlers can be defined in separate\nfiles and still have the correct types."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "Filter",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "NarrowMatch",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "C",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "C"
                    }
                  },
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "NarrowMatch"
              }
            },
            {
              "repr": ":entities:bot_command",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": ":entities:bot_command"
              }
            }
          ],
          "typeName": "Filter"
        }
      },
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "class",
    "name": "Context",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/context.ts",
      "line": 266,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "When your bot receives a message, Telegram sends an update object to your\nbot. The update contains information about the chat, the user, and of course\nthe message itself. There are numerous other updates, too:\nhttps://core.telegram.org/bots/api#update\n\nWhen grammY receives an update, it wraps this update into a context object\nfor you. Context objects are commonly named `ctx`. A context object does two\nthings:\n1. **`ctx.update`** holds the update object that you can use to process the\n   message. This includes providing useful shortcuts for the update, for\n   instance, `ctx.msg` is a shortcut that gives you the message object from\n   the update—no matter whether it is contained in `ctx.update.message`, or\n   `ctx.update.edited_message`, or `ctx.update.channel_post`, or\n   `ctx.update.edited_channel_post`.\n2. **`ctx.api`** gives you access to the full Telegram Bot API so that you\n   can directly call any method, such as responding via\n   `ctx.api.sendMessage`. Also here, the context objects has some useful\n   shortcuts for you. For instance, if you want to send a message to the same\n   chat that a message comes from (i.e. just respond to a user) you can call\n   `ctx.reply`. This is nothing but a wrapper for `ctx.api.sendMessage` with\n   the right `chat_id` pre-filled for you. Almost all methods of the Telegram\n   Bot API have their own shortcut directly on the context object, so you\n   probably never really have to use `ctx.api` at all.\n\nThis context object is then passed to all of the listeners (called\nmiddleware) that you register on your bot. Because this is so useful, the\ncontext object is often used to hold more information. One example are\nsessions (a chat-specific data storage that is stored in a database), and\nanother example is `ctx.match` that is used by `bot.command` and other\nmethods to keep information about how a regular expression was matched.\n\nRead up about middleware on the\n[website](https://grammy.dev/guide/context.html) if you want to know more\nabout the powerful opportunities that lie in context objects, and about how\ngrammY implements them."
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "hasBody": true,
          "name": "constructor",
          "params": [
            {
              "accessibility": "public",
              "kind": "identifier",
              "name": "update",
              "optional": false,
              "tsType": {
                "repr": "Update",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Update"
                }
              },
              "readonly": true
            },
            {
              "accessibility": "public",
              "kind": "identifier",
              "name": "api",
              "optional": false,
              "tsType": {
                "repr": "Api",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Api"
                }
              },
              "readonly": true
            },
            {
              "accessibility": "public",
              "kind": "identifier",
              "name": "me",
              "optional": false,
              "tsType": {
                "repr": "UserFromGetMe",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "UserFromGetMe"
                }
              },
              "readonly": true
            }
          ],
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 273,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": {
            "doc": "Used by some middleware to store information about how a certain string\nor regular expression was matched."
          },
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "RegExpMatchArray",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "RegExpMatchArray"
                }
              },
              {
                "repr": "undefined",
                "kind": "keyword",
                "keyword": "undefined"
              }
            ]
          },
          "readonly": false,
          "accessibility": "public",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "match",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 271,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "`Context.has` is an object that contains a number of useful functions for\nprobing context objects. Each of these functions can generate a predicate\nfunction, to which you can pass context objects in order to check if a\ncondition holds for the respective context object.\n\nFor example, you can call `Context.has.filterQuery(\":text\")` to generate\na predicate function that tests context objects for containing text:\n```ts\nconst hasText = Context.has.filterQuery(\":text\");\n\nif (hasText(ctx0)) {} // `ctx0` matches the filter query `:text`\nif (hasText(ctx1)) {} // `ctx1` matches the filter query `:text`\nif (hasText(ctx2)) {} // `ctx2` matches the filter query `:text`\n```\nThese predicate functions are used internally by the has-methods that are\ninstalled on every context object. This means that calling\n`ctx.has(\":text\")` is equivalent to\n`Context.has.filterQuery(\":text\")(ctx)`."
          },
          "tsType": null,
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "has",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 476,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": {
            "doc": "Alias for `ctx.update.message`"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "message",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 292,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Alias for `ctx.update.edited_message`"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editedMessage",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 296,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Alias for `ctx.update.channel_post`"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "channelPost",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 300,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Alias for `ctx.update.edited_channel_post`"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editedChannelPost",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 304,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Alias for `ctx.update.inline_query`"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "inlineQuery",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 308,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Alias for `ctx.update.chosen_inline_result`"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "chosenInlineResult",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 312,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Alias for `ctx.update.callback_query`"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "callbackQuery",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 316,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Alias for `ctx.update.shipping_query`"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "shippingQuery",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 320,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Alias for `ctx.update.pre_checkout_query`"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "preCheckoutQuery",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 324,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Alias for `ctx.update.poll`"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "poll",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 328,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Alias for `ctx.update.poll_answer`"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "pollAnswer",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 332,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Alias for `ctx.update.my_chat_member`"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "myChatMember",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 336,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Alias for `ctx.update.chat_member`"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "chatMember",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 340,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Alias for `ctx.update.chat_join_request`"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "chatJoinRequest",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 344,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Get message object from wherever possible. Alias for `ctx.message ??\nctx.editedMessage ?? ctx.callbackQuery?.message ?? ctx.channelPost ??\nctx.editedChannelPost`"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "msg",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Message",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Message"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 355,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Get chat object from wherever possible. Alias for `(ctx.msg ??\nctx.myChatMember ?? ctx.chatMember ?? ctx.chatJoinRequest)?.chat`"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "chat",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Chat",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Chat"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 369,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Get sender chat object from wherever possible. Alias for\n`ctx.msg?.sender_chat`."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "senderChat",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Chat",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Chat"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 382,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Get message author from wherever possible. Alias for\n`(ctx.callbackQuery?? ctx.inlineQuery ?? ctx.shippingQuery ??\nctx.preCheckoutQuery ?? ctx.chosenInlineResult ?? ctx.msg ??\nctx.myChatMember ?? ctx.chatMember ?? ctx.chatJoinRequest)?.from`"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "from",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "User",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "User"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 391,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Get inline message ID from wherever possible. Alias for\n`(ctx.callbackQuery ?? ctx.chosenInlineResult)?.inline_message_id`"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "inlineMessageId",
          "kind": "getter",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 409,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Get entities and their text. Extracts the text from `ctx.msg.text` or `ctx.msg.caption`.\nReturns an empty array if one of `ctx.msg`, `ctx.msg.text`\nor `ctx.msg.entities` is undefined.\n\nYou can filter specific entity types by passing the `types` parameter. Example:\n\n```ts\nctx.entities() // Returns all entity types\nctx.entities('url') // Returns only url entities\nctx.enttities(['url', 'email']) // Returns url and email entities\n```\n",
            "tags": [
              {
                "kind": "param",
                "name": "types",
                "doc": "Types of entities to return. Omit to get all entities."
              },
              {
                "kind": "return",
                "doc": "Array of entities and their texts, or empty array when there's no text"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "entities",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Array",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "intersection",
                    "intersection": [
                      {
                        "repr": "MessageEntity",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "MessageEntity"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "typeLiteral",
                        "typeLiteral": {
                          "methods": [],
                          "properties": [
                            {
                              "name": "text",
                              "params": [],
                              "computed": false,
                              "optional": false,
                              "tsType": {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              },
                              "typeParams": []
                            }
                          ],
                          "callSignatures": [],
                          "indexSignatures": []
                        }
                      }
                    ]
                  }
                ],
                "typeName": "Array"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 431,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "entities",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "types",
                "optional": false,
                "tsType": {
                  "repr": "MaybeArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      }
                    ],
                    "typeName": "MaybeArray"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Array",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "intersection",
                    "intersection": [
                      {
                        "repr": "MessageEntity",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "MessageEntity"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "typeLiteral",
                        "typeLiteral": {
                          "methods": [],
                          "properties": [
                            {
                              "name": "type",
                              "params": [],
                              "computed": false,
                              "optional": false,
                              "tsType": {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "T"
                                }
                              },
                              "typeParams": []
                            },
                            {
                              "name": "text",
                              "params": [],
                              "computed": false,
                              "optional": false,
                              "tsType": {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              },
                              "typeParams": []
                            }
                          ],
                          "callSignatures": [],
                          "indexSignatures": []
                        }
                      }
                    ]
                  }
                ],
                "typeName": "Array"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "T",
                "constraint": {
                  "repr": "",
                  "kind": "indexedAccess",
                  "indexedAccess": {
                    "readonly": false,
                    "objType": {
                      "repr": "MessageEntity",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "MessageEntity"
                      }
                    },
                    "indexType": {
                      "repr": "type",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "type"
                      }
                    }
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 432,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "entities",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "types",
                "optional": true,
                "tsType": {
                  "repr": "MaybeArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "MessageEntity",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "MessageEntity"
                            }
                          },
                          "indexType": {
                            "repr": "type",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "type"
                            }
                          }
                        }
                      }
                    ],
                    "typeName": "MaybeArray"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 435,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns `true` if this context object matches the given filter query, and\n`false` otherwise. This uses the same logic as `bot.on`.\n",
            "tags": [
              {
                "kind": "param",
                "name": "filter",
                "doc": "The filter query to check"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "has",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "filter",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Q",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Q"
                      }
                    },
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "Q",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Q"
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "this is FilterCore<Q>",
              "kind": "typePredicate",
              "typePredicate": {
                "asserts": false,
                "param": {
                  "type": "this"
                },
                "type": {
                  "repr": "FilterCore",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Q",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Q"
                        }
                      }
                    ],
                    "typeName": "FilterCore"
                  }
                }
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "Q",
                "constraint": {
                  "repr": "FilterQuery",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "FilterQuery"
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 483,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns `true` if this context object contains the given text, or if it\ncontains text that matches the given regular expression. It returns\n`false` otherwise. This uses the same logic as `bot.hears`.\n",
            "tags": [
              {
                "kind": "param",
                "name": "trigger",
                "doc": "The string or regex to match"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hasText",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "trigger",
                "optional": false,
                "tsType": {
                  "repr": "MaybeArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "RegExp",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "RegExp"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "MaybeArray"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "this is HearsContextCore",
              "kind": "typePredicate",
              "typePredicate": {
                "asserts": false,
                "param": {
                  "type": "this"
                },
                "type": {
                  "repr": "HearsContextCore",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "HearsContextCore"
                  }
                }
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 493,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns `true` if this context object contains the given command, and\n`false` otherwise. This uses the same logic as `bot.command`.\n",
            "tags": [
              {
                "kind": "param",
                "name": "command",
                "doc": "The command to match"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hasCommand",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "command",
                "optional": false,
                "tsType": {
                  "repr": "MaybeArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "StringWithSuggestions",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "S",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "S"
                                  }
                                },
                                {
                                  "repr": "start",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "start"
                                  }
                                },
                                {
                                  "repr": "help",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "help"
                                  }
                                },
                                {
                                  "repr": "settings",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "settings"
                                  }
                                }
                              ]
                            }
                          ],
                          "typeName": "StringWithSuggestions"
                        }
                      }
                    ],
                    "typeName": "MaybeArray"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "this is CommandContextCore",
              "kind": "typePredicate",
              "typePredicate": {
                "asserts": false,
                "param": {
                  "type": "this"
                },
                "type": {
                  "repr": "CommandContextCore",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "CommandContextCore"
                  }
                }
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "S",
                "constraint": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ]
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 502,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns `true` if this context object belongs to a chat with the given\nchat type, and `false` otherwise. This uses the same logic as\n`bot.chatType`.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chatType",
                "doc": "The chat type to match"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hasChatType",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chatType",
                "optional": false,
                "tsType": {
                  "repr": "MaybeArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      }
                    ],
                    "typeName": "MaybeArray"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "this is ChatTypeContextCore<T>",
              "kind": "typePredicate",
              "typePredicate": {
                "asserts": false,
                "param": {
                  "type": "this"
                },
                "type": {
                  "repr": "ChatTypeContextCore",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      }
                    ],
                    "typeName": "ChatTypeContextCore"
                  }
                }
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "T",
                "constraint": {
                  "repr": "",
                  "kind": "indexedAccess",
                  "indexedAccess": {
                    "readonly": false,
                    "objType": {
                      "repr": "Chat",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Chat"
                      }
                    },
                    "indexType": {
                      "repr": "type",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "type"
                      }
                    }
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 516,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns `true` if this context object contains the given callback query,\nor if the contained callback query data matches the given regular\nexpression. It returns `false` otherwise. This uses the same logic as\n`bot.callbackQuery`.\n",
            "tags": [
              {
                "kind": "param",
                "name": "trigger",
                "doc": "The string or regex to match"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hasCallbackQuery",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "trigger",
                "optional": false,
                "tsType": {
                  "repr": "MaybeArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "RegExp",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "RegExp"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "MaybeArray"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "this is CallbackQueryContextCore",
              "kind": "typePredicate",
              "typePredicate": {
                "asserts": false,
                "param": {
                  "type": "this"
                },
                "type": {
                  "repr": "CallbackQueryContextCore",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "CallbackQueryContextCore"
                  }
                }
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 529,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns `true` if this context object contains the given game query, or\nif the contained game query matches the given regular expression. It\nreturns `false` otherwise. This uses the same logic as `bot.gameQuery`.\n",
            "tags": [
              {
                "kind": "param",
                "name": "trigger",
                "doc": "The string or regex to match"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hasGameQuery",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "trigger",
                "optional": false,
                "tsType": {
                  "repr": "MaybeArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "RegExp",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "RegExp"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "MaybeArray"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "this is GameQueryContextCore",
              "kind": "typePredicate",
              "typePredicate": {
                "asserts": false,
                "param": {
                  "type": "this"
                },
                "type": {
                  "repr": "GameQueryContextCore",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GameQueryContextCore"
                  }
                }
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 541,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns `true` if this context object contains the given inline query, or\nif the contained inline query matches the given regular expression. It\nreturns `false` otherwise. This uses the same logic as `bot.inlineQuery`.\n",
            "tags": [
              {
                "kind": "param",
                "name": "trigger",
                "doc": "The string or regex to match"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hasInlineQuery",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "trigger",
                "optional": false,
                "tsType": {
                  "repr": "MaybeArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "RegExp",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "RegExp"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "MaybeArray"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "this is InlineQueryContextCore",
              "kind": "typePredicate",
              "typePredicate": {
                "asserts": false,
                "param": {
                  "type": "this"
                },
                "type": {
                  "repr": "InlineQueryContextCore",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "InlineQueryContextCore"
                  }
                }
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 553,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns `true` if this context object contains the chosen inline result, or\nif the contained chosen inline result matches the given regular expression. It\nreturns `false` otherwise. This uses the same logic as `bot.chosenInlineResult`.\n",
            "tags": [
              {
                "kind": "param",
                "name": "trigger",
                "doc": "The string or regex to match"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hasChosenInlineResult",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "trigger",
                "optional": false,
                "tsType": {
                  "repr": "MaybeArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "RegExp",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "RegExp"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "MaybeArray"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "this is ChosenInlineResultContextCore",
              "kind": "typePredicate",
              "typePredicate": {
                "asserts": false,
                "param": {
                  "type": "this"
                },
                "type": {
                  "repr": "ChosenInlineResultContextCore",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ChosenInlineResultContextCore"
                  }
                }
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 566,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.sendMessage`. Use this method to send text messages. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "Text of the message to be sent, 1-4096 characters after entities parsing"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendmessage"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "reply",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "sendMessage",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendMessage"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "text",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "text"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 583,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.forwardMessage`. Use this method to forward messages of any kind. Service messages can't be forwarded. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#forwardmessage"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "forwardMessage",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "forwardMessage",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "forwardMessage"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "from_chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "from_chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 605,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.copyMessage`. Use this method to copy messages of any kind. Service messages and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message. Returns the MessageId of the sent message on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#copymessage"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "copyMessage",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "copyMessage",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "copyMessage"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "from_chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "from_chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 631,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.sendPhoto`. Use this method to send photos. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "photo",
                "doc": "Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendphoto"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replyWithPhoto",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "photo",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "InputFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InputFile"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "sendPhoto",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendPhoto"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "photo",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "photo"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 654,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.sendAudio`. Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.\n\nFor sending voice messages, use the sendVoice method instead.\n",
            "tags": [
              {
                "kind": "param",
                "name": "audio",
                "doc": "Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendaudio"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replyWithAudio",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "audio",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "InputFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InputFile"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "sendAudio",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendAudio"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "audio",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "audio"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 678,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.sendDocument`. Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.\n",
            "tags": [
              {
                "kind": "param",
                "name": "document",
                "doc": "File to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#senddocument"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replyWithDocument",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "document",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "InputFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InputFile"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "sendDocument",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendDocument"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "document",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "document"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 700,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.sendVideo`. Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.\n",
            "tags": [
              {
                "kind": "param",
                "name": "video",
                "doc": "Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendvideo"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replyWithVideo",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "video",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "InputFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InputFile"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "sendVideo",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendVideo"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "video",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "video"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 722,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.sendAnimation`. Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent Message is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.\n",
            "tags": [
              {
                "kind": "param",
                "name": "animation",
                "doc": "Animation to send. Pass a file_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendanimation"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replyWithAnimation",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "animation",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "InputFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InputFile"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "sendAnimation",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendAnimation"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "animation",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "animation"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 744,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.sendVoice`. Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.\n",
            "tags": [
              {
                "kind": "param",
                "name": "voice",
                "doc": "Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendvoice"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replyWithVoice",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "voice",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "InputFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InputFile"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "sendVoice",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendVoice"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "voice",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "voice"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 766,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.sendVideoNote`. Use this method to send video messages. On success, the sent Message is returned.\nAs of v.4.0, Telegram clients support rounded square mp4 videos of up to 1 minute long.\n",
            "tags": [
              {
                "kind": "param",
                "name": "video_note",
                "doc": "Video note to send. Pass a file_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data.. Sending video notes by a URL is currently unsupported"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendvideonote"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replyWithVideoNote",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "video_note",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "InputFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InputFile"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "sendVideoNote",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendVideoNote"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "video_note",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "video_note"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 789,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.sendMediaGroup`. Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of Messages that were sent is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "media",
                "doc": "An array describing messages to be sent, must include 2-10 items"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendmediagroup"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replyWithMediaGroup",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "media",
                "optional": false,
                "tsType": {
                  "repr": "ReadonlyArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "InputMediaAudio",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InputMediaAudio"
                            }
                          },
                          {
                            "repr": "InputMediaDocument",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InputMediaDocument"
                            }
                          },
                          {
                            "repr": "InputMediaPhoto",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InputMediaPhoto"
                            }
                          },
                          {
                            "repr": "InputMediaVideo",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InputMediaVideo"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "ReadonlyArray"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "sendMediaGroup",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendMediaGroup"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "media",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "media"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 811,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.sendLocation`. Use this method to send point on the map. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "latitude",
                "doc": "Latitude of the location"
              },
              {
                "kind": "param",
                "name": "longitude",
                "doc": "Longitude of the location"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendlocation"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replyWithLocation",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "latitude",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "longitude",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "sendLocation",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendLocation"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "latitude",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "latitude"
                            }
                          },
                          {
                            "repr": "longitude",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "longitude"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 839,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.editMessageLiveLocation`. Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "latitude",
                "doc": "Latitude of new location"
              },
              {
                "kind": "param",
                "name": "longitude",
                "doc": "Longitude of new location"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editmessagelivelocation"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editMessageLiveLocation",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "latitude",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "longitude",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "editMessageLiveLocation",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editMessageLiveLocation"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          },
                          {
                            "repr": "latitude",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "latitude"
                            }
                          },
                          {
                            "repr": "longitude",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "longitude"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 864,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.stopMessageLiveLocation`. Use this method to stop updating a live location message before live_period expires. On success, if the message is not an inline message, the edited Message is returned, otherwise True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#stopmessagelivelocation"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "stopMessageLiveLocation",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "stopMessageLiveLocation",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "stopMessageLiveLocation"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 903,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.sendVenue`. Use this method to send information about a venue. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "latitude",
                "doc": "Latitude of the venue"
              },
              {
                "kind": "param",
                "name": "longitude",
                "doc": "Longitude of the venue"
              },
              {
                "kind": "param",
                "name": "title",
                "doc": "Name of the venue"
              },
              {
                "kind": "param",
                "name": "address",
                "doc": "Address of the venue"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendvenue"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replyWithVenue",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "latitude",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "longitude",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "title",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "address",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "sendVenue",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendVenue"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "latitude",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "latitude"
                            }
                          },
                          {
                            "repr": "longitude",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "longitude"
                            }
                          },
                          {
                            "repr": "title",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "title"
                            }
                          },
                          {
                            "repr": "address",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "address"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 933,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.sendContact`. Use this method to send phone contacts. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "phone_number",
                "doc": "Contact's phone number"
              },
              {
                "kind": "param",
                "name": "first_name",
                "doc": "Contact's first name"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendcontact"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replyWithContact",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "phone_number",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "first_name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "sendContact",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendContact"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "phone_number",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "phone_number"
                            }
                          },
                          {
                            "repr": "first_name",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "first_name"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 965,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.sendPoll`. Use this method to send a native poll. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "question",
                "doc": "Poll question, 1-300 characters"
              },
              {
                "kind": "param",
                "name": "options",
                "doc": "A list of answer options, 2-10 strings 1-100 characters each"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendpoll"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replyWithPoll",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "question",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "readonly",
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "sendPoll",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendPoll"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "question",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "question"
                            }
                          },
                          {
                            "repr": "options",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "options"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 990,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.sendDice`. Use this method to send an animated emoji that will display a random value. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "emoji",
                "doc": "Emoji on which the dice throw animation is based. Currently, must be one of “🎲”, “🎯”, “🏀”, “⚽”, or “🎰”. Dice can have values 1-6 for “🎲” and “🎯”, values 1-5 for “🏀” and “⚽”, and values 1-64 for “🎰”. Defaults to “🎲”"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#senddice"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replyWithDice",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "emoji",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "sendDice",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendDice"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "emoji",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "emoji"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1014,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.sendChatAction`. Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success.\n\nExample: The ImageBot needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use sendChatAction with action = upload_photo. The user will see a “sending photo” status for the bot.\n\nWe only recommend using this method when a response from the bot will take a noticeable amount of time to arrive.\n",
            "tags": [
              {
                "kind": "param",
                "name": "action",
                "doc": "Type of action to broadcast. Choose one, depending on what the user is about to receive: typing for text messages, upload_photo for photos, record_video or upload_video for videos, record_voice or upload_voice for voice notes, upload_document for general files, choose_sticker for stickers, find_location for location data, record_video_note or upload_video_note for video notes."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendchataction"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replyWithChatAction",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "action",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "typing",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "typing"
                      }
                    },
                    {
                      "repr": "upload_photo",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "upload_photo"
                      }
                    },
                    {
                      "repr": "record_video",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "record_video"
                      }
                    },
                    {
                      "repr": "upload_video",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "upload_video"
                      }
                    },
                    {
                      "repr": "record_voice",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "record_voice"
                      }
                    },
                    {
                      "repr": "upload_voice",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "upload_voice"
                      }
                    },
                    {
                      "repr": "upload_document",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "upload_document"
                      }
                    },
                    {
                      "repr": "choose_sticker",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "choose_sticker"
                      }
                    },
                    {
                      "repr": "find_location",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "find_location"
                      }
                    },
                    {
                      "repr": "record_video_note",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "record_video_note"
                      }
                    },
                    {
                      "repr": "upload_video_note",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "upload_video_note"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "sendChatAction",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendChatAction"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "action",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "action"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1040,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.getUserProfilePhotos`. Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object.\n",
            "tags": [
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Unique identifier of the target user"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getuserprofilephotos"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getUserProfilePhotos",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "getUserProfilePhotos",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "getUserProfilePhotos"
                        }
                      },
                      {
                        "repr": "user_id",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "user_id"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1073,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.getFile`. Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>, where <file_path> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile again.\n\nNote: This function may not preserve the original file name and MIME type. You should save the file's MIME type and name (if available) when the File object is received.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getfile"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getFile",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1093,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "tags": [
              {
                "kind": "deprecated",
                "doc": "Use `banAuthor` instead."
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "kickAuthor",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "args",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Parameters",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "Context",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Context"
                            }
                          },
                          "indexType": {
                            "repr": "banAuthor",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "banAuthor"
                            }
                          }
                        }
                      }
                    ],
                    "typeName": "Parameters"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1108,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.banChatMember`. Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#banchatmember"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "banAuthor",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "banChatMember",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "banChatMember"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "user_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "user_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1119,
            "col": 6
          }
        },
        {
          "jsDoc": {
            "tags": [
              {
                "kind": "deprecated",
                "doc": "Use `banChatMember` instead."
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "kickChatMember",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "args",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Parameters",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "Context",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Context"
                            }
                          },
                          "indexType": {
                            "repr": "banChatMember",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "banChatMember"
                            }
                          }
                        }
                      }
                    ],
                    "typeName": "Parameters"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1132,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.banChatMember`. Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Unique identifier of the target user"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#banchatmember"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "banChatMember",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "banChatMember",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "banChatMember"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "user_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "user_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1145,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.unbanChatMember`. Use this method to unban a previously banned user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be removed from the chat. If you don't want this, use the parameter only_if_banned. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Unique identifier of the target user"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#unbanchatmember"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "unbanChatMember",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "unbanChatMember",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "unbanChatMember"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "user_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "user_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1167,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.restrictChatMember`. Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass True for all permissions to lift restrictions from a user. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "permissions",
                "doc": "An object for new user permissions"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#restrictchatmember"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "restrictAuthor",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "permissions",
                "optional": false,
                "tsType": {
                  "repr": "ChatPermissions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ChatPermissions"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "restrictChatMember",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "restrictChatMember"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "user_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "user_id"
                            }
                          },
                          {
                            "repr": "permissions",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "permissions"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1189,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.restrictChatMember`. Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass True for all permissions to lift restrictions from a user. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Unique identifier of the target user"
              },
              {
                "kind": "param",
                "name": "permissions",
                "doc": "An object for new user permissions"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#restrictchatmember"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "restrictChatMember",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "permissions",
                "optional": false,
                "tsType": {
                  "repr": "ChatPermissions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ChatPermissions"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "restrictChatMember",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "restrictChatMember"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "user_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "user_id"
                            }
                          },
                          {
                            "repr": "permissions",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "permissions"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1216,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.promoteChatMember`. Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass False for all boolean parameters to demote a user. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#promotechatmember"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "promoteAuthor",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "promoteChatMember",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "promoteChatMember"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "user_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "user_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1242,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.promoteChatMember`. Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass False for all boolean parameters to demote a user. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Unique identifier of the target user"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#promotechatmember"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "promoteChatMember",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "promoteChatMember",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "promoteChatMember"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "user_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "user_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1263,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.setChatAdministratorCustomTitle`. Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "custom_title",
                "doc": "New custom title for the administrator; 0-16 characters, emoji are not allowed"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setchatadministratorcustomtitle"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setChatAdministratorAuthorCustomTitle",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "custom_title",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1284,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.setChatAdministratorCustomTitle`. Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Unique identifier of the target user"
              },
              {
                "kind": "param",
                "name": "custom_title",
                "doc": "New custom title for the administrator; 0-16 characters, emoji are not allowed"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setchatadministratorcustomtitle"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setChatAdministratorCustomTitle",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "custom_title",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1305,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.banChatSenderChat`. Use this method to ban a channel chat in a supergroup or a channel. Until the chat is unbanned, the owner of the banned chat won't be able to send messages on behalf of any of their channels. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "sender_chat_id",
                "doc": "Unique identifier of the target sender chat"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#banchatsenderchat"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "banChatSenderChat",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "sender_chat_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1326,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.unbanChatSenderChat`. Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "sender_chat_id",
                "doc": "Unique identifier of the target sender chat"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#unbanchatsenderchat"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "unbanChatSenderChat",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "sender_chat_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1342,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.setChatPermissions`. Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "permissions",
                "doc": "New default chat permissions"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setchatpermissions"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setChatPermissions",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "permissions",
                "optional": false,
                "tsType": {
                  "repr": "ChatPermissions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ChatPermissions"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1361,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.exportChatInviteLink`. Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the new invite link as String on success.\n\nNote: Each administrator in a chat generates their own invite links. Bots can't use invite links generated by other administrators. If you want your bot to work with invite links, it will need to generate its own link using exportChatInviteLink or by calling the getChat method. If your bot needs to generate a new primary invite link replacing its previous one, use exportChatInviteLink again.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#exportchatinvitelink"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "exportChatInviteLink",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1378,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.createChatInviteLink`. Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#createchatinvitelink"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "createChatInviteLink",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "createChatInviteLink",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "createChatInviteLink"
                        }
                      },
                      {
                        "repr": "chat_id",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "chat_id"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1393,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.editChatInviteLink`. Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a ChatInviteLink object.\n",
            "tags": [
              {
                "kind": "param",
                "name": "invite_link",
                "doc": "The invite link to edit"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editchatinvitelink"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editChatInviteLink",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "invite_link",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "editChatInviteLink",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editChatInviteLink"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "invite_link",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "invite_link"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1413,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.revokeChatInviteLink`. Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as ChatInviteLink object.\n",
            "tags": [
              {
                "kind": "param",
                "name": "invite_link",
                "doc": "The invite link to revoke"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#revokechatinvitelink"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "revokeChatInviteLink",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "invite_link",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1434,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.approveChatJoinRequest`. Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Unique identifier of the target user"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#approvechatjoinrequest"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "approveChatJoinRequest",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1450,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.declineChatJoinRequest`. Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Unique identifier of the target user"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#declinechatjoinrequest"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "declineChatJoinRequest",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1469,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.setChatPhoto`. Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "photo",
                "doc": "New chat photo, uploaded using multipart/form-data"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setchatphoto"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setChatPhoto",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "photo",
                "optional": false,
                "tsType": {
                  "repr": "InputFile",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "InputFile"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1488,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.deleteChatPhoto`. Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#deletechatphoto"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "deleteChatPhoto",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1503,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.setChatTitle`. Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "title",
                "doc": "New chat title, 1-255 characters"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setchattitle"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setChatTitle",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "title",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1518,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.setChatDescription`. Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "description",
                "doc": "New chat description, 0-255 characters"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setchatdescription"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setChatDescription",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "description",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1534,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.pinChatMessage`. Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "message_id",
                "doc": "Identifier of a message to pin"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#pinchatmessage"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "pinChatMessage",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "message_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "pinChatMessage",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "pinChatMessage"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1551,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.unpinChatMessage`. Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "message_id",
                "doc": "Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned."
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#unpinchatmessage"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "unpinChatMessage",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "message_id",
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1572,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.unpinAllChatMessages`. Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#unpinallchatmessages"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "unpinAllChatMessages",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1587,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.leaveChat`. Use this method for your bot to leave a group, supergroup or channel. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#leavechat"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "leaveChat",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1601,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.getChat`. Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getchat"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getChat",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1612,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.getChatAdministrators`. Use this method to get a list of administrators in a chat, which aren't bots. Returns an Array of ChatMember objects.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getchatadministrators"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getChatAdministrators",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1623,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "tags": [
              {
                "kind": "deprecated",
                "doc": "Use `getChatMembersCount` instead."
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getChatMembersCount",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "args",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Parameters",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "Context",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Context"
                            }
                          },
                          "indexType": {
                            "repr": "getChatMemberCount",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "getChatMemberCount"
                            }
                          }
                        }
                      }
                    ],
                    "typeName": "Parameters"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1631,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.getChatMemberCount`. Use this method to get the number of members in a chat. Returns Int on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getchatmembercount"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getChatMemberCount",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1642,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.getChatMember`. Use this method to get information about a member of a chat. The method is guaranteed to work only if the bot is an administrator in the chat. Returns a ChatMember object on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getchatmember"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getAuthor",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1656,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.getChatMember`. Use this method to get information about a member of a chat. The method is guaranteed to work only if the bot is an administrator in the chat. Returns a ChatMember object on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Unique identifier of the target user"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getchatmember"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getChatMember",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1672,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.setChatStickerSet`. Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set ly returned in getChat requests to check if the bot can use this method. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "sticker_set_name",
                "doc": "Name of the sticker set to be set as the group sticker set"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setchatstickerset"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setChatStickerSet",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "sticker_set_name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1688,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.deleteChatStickerSet`. Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set ly returned in getChat requests to check if the bot can use this method. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#deletechatstickerset"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "deleteChatStickerSet",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1703,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.createForumTopic`. Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns information about the created topic as a ForumTopic object.\n",
            "tags": [
              {
                "kind": "param",
                "name": "name",
                "doc": "Topic name, 1-128 characters"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#createforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "createForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "createForumTopic",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "createForumTopic"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "name",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "name"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1719,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.editForumTopic`. Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "editForumTopic",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editForumTopic"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_thread_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_thread_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1740,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.closeForumTopic`. Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#closeforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "closeForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1756,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.reopenForumTopic`. Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#reopenforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "reopenForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1769,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.deleteForumTopic`. Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#deleteforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "deleteForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1782,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.unpinAllForumTopicMessages`. Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#unpinallforumtopicmessages"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "unpinAllForumTopicMessages",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1795,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.editGeneralForumTopic`. Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "name",
                "doc": "New topic name, 1-128 characters"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editgeneralforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editGeneralForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1816,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.closeGeneralForumTopic`. Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#closegeneralforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "closeGeneralForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1831,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.reopenGeneralForumTopic`. Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically unhidden if it was hidden. Returns True on success.     *\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#reopengeneralforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "reopenGeneralForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1845,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.hideGeneralForumTopic`. Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically closed if it was open. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#hidegeneralforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hideGeneralForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1859,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.unhideGeneralForumTopic`. Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#unhidegeneralforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "unhideGeneralForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1873,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.unpinAllGeneralForumTopicMessages`. Use this method to clear the list of pinned messages in a General forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#unpinallgeneralforumtopicmessages"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "unpinAllGeneralForumTopicMessages",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1887,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.answerCallbackQuery`. Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned.\n\nAlternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via @BotFather and accept the terms. Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#answercallbackquery"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "answerCallbackQuery",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "Other",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "answerCallbackQuery",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "answerCallbackQuery"
                            }
                          },
                          {
                            "repr": "callback_query_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "callback_query_id"
                            }
                          }
                        ],
                        "typeName": "Other"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1904,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.setChatMenuButton`. Use this method to change the bot's menu button in a private chat, or the default menu button. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setchatmenubutton"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setChatMenuButton",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "setChatMenuButton",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "setChatMenuButton"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1923,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.getChatMenuButton`. Use this method to get the current value of the bot's menu button in a private chat, or the default menu button. Returns MenuButton on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setchatmenubutton"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getChatMenuButton",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "getChatMenuButton",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "getChatMenuButton"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1938,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.setMyDefaultAdministratorRights`. Use this method to the change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are are free to modify the list before adding the bot. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setmydefaultadministratorrights"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setMyDefaultAdministratorRights",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "setMyDefaultAdministratorRights",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "setMyDefaultAdministratorRights"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1953,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.getMyDefaultAdministratorRights`. Use this method to get the current default administrator rights of the bot. Returns ChatAdministratorRights on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getMyDefaultAdministratorRights",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "getMyDefaultAdministratorRights",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "getMyDefaultAdministratorRights"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1966,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.editMessageText`. Use this method to edit text and game messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "New text of the message, 1-4096 characters after entities parsing"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editmessagetext"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editMessageText",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "editMessageText",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editMessageText"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          },
                          {
                            "repr": "text",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "text"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 1982,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.editMessageCaption`. Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editmessagecaption"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editMessageCaption",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "editMessageCaption",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editMessageCaption"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 2010,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.editMessageMedia`. Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its file_id or specify a URL. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "media",
                "doc": "An object for a new media content of the message"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editmessagemedia"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editMessageMedia",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "media",
                "optional": false,
                "tsType": {
                  "repr": "InputMedia",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "InputMedia"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "editMessageMedia",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editMessageMedia"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          },
                          {
                            "repr": "media",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "media"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 2037,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.editMessageReplyMarkup`. Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editmessagereplymarkup"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editMessageReplyMarkup",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "editMessageReplyMarkup",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editMessageReplyMarkup"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 2065,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.stopPoll`. Use this method to stop a poll which was sent by the bot. On success, the stopped Poll is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#stoppoll"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "stopPoll",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "stopPoll",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "stopPoll"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 2091,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.deleteMessage`. Use this method to delete a message, including service messages, with the following limitations:\n- A message can only be deleted if it was sent less than 48 hours ago.\n- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.\n- Bots can delete outgoing messages in private chats, groups, and supergroups.\n- Bots can delete incoming messages in private chats.\n- Bots granted can_post_messages permissions can delete outgoing messages in channels.\n- If the bot is an administrator of a group, it can delete any message there.\n- If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there.\nReturns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#deletemessage"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "deleteMessage",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 2118,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.sendSticker`. Use this method to send static .WEBP, animated .TGS, or video .WEBM stickers. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "sticker",
                "doc": "Sticker to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP file from the Internet, or upload a new one using multipart/form-data."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendsticker"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replyWithSticker",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "sticker",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "InputFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InputFile"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "sendSticker",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendSticker"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "sticker",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "sticker"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 2135,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get information about custom emoji stickers by their identifiers. Returns an Array of Sticker objects.\n",
            "tags": [
              {
                "kind": "param",
                "name": "custom_emoji_ids",
                "doc": "List of custom emoji identifiers"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getcustomemojistickers"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getCustomEmojiStickers",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 2156,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.answerInlineQuery`. Use this method to send answers to an inline query. On success, True is returned.\nNo more than 50 results per query are allowed.\n\nExample: An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an OAuth link. Once done, the bot can offer a switch_inline button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.\n",
            "tags": [
              {
                "kind": "param",
                "name": "results",
                "doc": "An array of results for the inline query"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#answerinlinequery"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "answerInlineQuery",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "results",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "readonly",
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "InlineQueryResult",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "InlineQueryResult"
                        }
                      }
                    }
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "answerInlineQuery",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "answerInlineQuery"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "inline_query_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_query_id"
                            }
                          },
                          {
                            "repr": "results",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "results"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 2178,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.sendInvoice`. Use this method to send invoices. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "title",
                "doc": "Product name, 1-32 characters"
              },
              {
                "kind": "param",
                "name": "description",
                "doc": "Product description, 1-255 characters"
              },
              {
                "kind": "param",
                "name": "payload",
                "doc": "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes."
              },
              {
                "kind": "param",
                "name": "provider_token",
                "doc": "Payment provider token, obtained via @BotFather"
              },
              {
                "kind": "param",
                "name": "currency",
                "doc": "Three-letter ISO 4217 currency code, see more on currencies"
              },
              {
                "kind": "param",
                "name": "prices",
                "doc": "Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendinvoice"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replyWithInvoice",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "title",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "description",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "payload",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "provider_token",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "currency",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "prices",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "readonly",
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "LabeledPrice",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "LabeledPrice"
                        }
                      }
                    }
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "sendInvoice",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendInvoice"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "title",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "title"
                            }
                          },
                          {
                            "repr": "description",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "description"
                            }
                          },
                          {
                            "repr": "payload",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "payload"
                            }
                          },
                          {
                            "repr": "provider_token",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "provider_token"
                            }
                          },
                          {
                            "repr": "currency",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "currency"
                            }
                          },
                          {
                            "repr": "prices",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "prices"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 2205,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.answerShippingQuery`. If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Bot API will send an Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "shipping_query_id",
                "doc": "Unique identifier for the query to be answered"
              },
              {
                "kind": "param",
                "name": "ok",
                "doc": "Pass True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#answershippingquery"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "answerShippingQuery",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "ok",
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "answerShippingQuery",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "answerShippingQuery"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "shipping_query_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "shipping_query_id"
                            }
                          },
                          {
                            "repr": "ok",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "ok"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 2247,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.answerPreCheckoutQuery`. Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field pre_checkout_query. Use this method to respond to such pre-checkout queries. On success, True is returned. Note: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.\n",
            "tags": [
              {
                "kind": "param",
                "name": "ok",
                "doc": "Specify True if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use False if there are any problems."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#answerprecheckoutquery"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "answerPreCheckoutQuery",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "ok",
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "Other",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "answerPreCheckoutQuery",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "answerPreCheckoutQuery"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "pre_checkout_query_id",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "pre_checkout_query_id"
                                }
                              },
                              {
                                "repr": "ok",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "ok"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "Other"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 2269,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.setPassportDataErrors`. Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success.\n\nUse this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.\n",
            "tags": [
              {
                "kind": "param",
                "name": "errors",
                "doc": "An array describing the errors"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setpassportdataerrors"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setPassportDataErrors",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "errors",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "readonly",
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "PassportElementError",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "PassportElementError"
                        }
                      }
                    }
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 2294,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Context-aware alias for `api.sendGame`. Use this method to send a game. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "game_short_name",
                "doc": "Short name of the game, serves as the unique identifier for the game. Set up your games via BotFather."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendgame"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replyWithGame",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "game_short_name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "sendGame",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendGame"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "game_short_name",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "game_short_name"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/context.ts",
            "line": 2314,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [
        {
          "repr": "RenamedUpdate",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "RenamedUpdate"
          }
        }
      ],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "typeAlias",
    "name": "GameQueryContext",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/context.ts",
      "line": 2396,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Type of the context object that is available inside the handlers for\n`bot.gameQuery`.\n\nThis helper type can be used to narrow down context objects the same way how\n`bot.gameQuery` does it. This allows you to annotate context objects in\nmiddleware that is not directly passed to `bot.gameQuery`, hence not\ninferring the correct type automatically. That way, handlers can be defined\nin separate files and still have the correct types."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "Filter",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "C",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "C"
              }
            },
            {
              "repr": "callback_query:game_short_name",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "callback_query:game_short_name"
              }
            }
          ],
          "typeName": "Filter"
        }
      },
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "typeAlias",
    "name": "HearsContext",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/context.ts",
      "line": 2342,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Type of the context object that is available inside the handlers for\n`bot.hears`.\n\nThis helper type can be used to narrow down context objects the same way how\n`bot.hears` does it. This allows you to annotate context objects in\nmiddleware that is not directly passed to `bot.hears`, hence not inferring\nthe correct type automatically. That way, handlers can be defined in separate\nfiles and still have the correct types."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "Filter",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "NarrowMatch",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "C",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "C"
                    }
                  },
                  {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "RegExpMatchArray",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "RegExpMatchArray"
                        }
                      }
                    ]
                  }
                ],
                "typeName": "NarrowMatch"
              }
            },
            {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": ":text",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": ":text"
                  }
                },
                {
                  "repr": ":caption",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": ":caption"
                  }
                }
              ]
            }
          ],
          "typeName": "Filter"
        }
      },
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "typeAlias",
    "name": "InlineQueryContext",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/context.ts",
      "line": 2412,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Type of the context object that is available inside the handlers for\n`bot.inlineQuery`.\n\nThis helper type can be used to narrow down context objects the same way how\nannotate `bot.inlineQuery` does it. This allows you to context objects in\nmiddleware that is not directly passed to `bot.inlineQuery`, hence not\ninferring the correct type automatically. That way, handlers can be defined\nin separate files and still have the correct types."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "Filter",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "C",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "C"
              }
            },
            {
              "repr": "inline_query",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "inline_query"
              }
            }
          ],
          "typeName": "Filter"
        }
      },
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "typeAlias",
    "name": "CallbackQueryMiddleware",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
      "line": 865,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Type of the middleware that can be passed to `bot.callbackQuery`.\n\nThis helper type can be used to annotate middleware functions that are\ndefined in one place, so that they have the correct type when passed to\n`bot.callbackQuery` in a different place. For instance, this allows for more\nmodular code where handlers are defined in separate files."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "Middleware",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "CallbackQueryContext",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "C",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "C"
                    }
                  }
                ],
                "typeName": "CallbackQueryContext"
              }
            }
          ],
          "typeName": "Middleware"
        }
      },
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "typeAlias",
    "name": "ChatTypeMiddleware",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
      "line": 909,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Type of the middleware that can be passed to `bot.chatType`.\n\nThis helper type can be used to annotate middleware functions that are\ndefined in one place, so that they have the correct type when passed to\n`bot.chatType` in a different place. For instance, this allows for more\nmodular code where handlers are defined in separate files."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "Middleware",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "ChatTypeContext",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "C",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "C"
                    }
                  },
                  {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  }
                ],
                "typeName": "ChatTypeContext"
              }
            }
          ],
          "typeName": "Middleware"
        }
      },
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        },
        {
          "name": "T",
          "constraint": {
            "repr": "",
            "kind": "indexedAccess",
            "indexedAccess": {
              "readonly": false,
              "objType": {
                "repr": "Chat",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Chat"
                }
              },
              "indexType": {
                "repr": "type",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "type"
                }
              }
            }
          }
        }
      ]
    }
  },
  {
    "kind": "typeAlias",
    "name": "CommandMiddleware",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
      "line": 854,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Type of the middleware that can be passed to `bot.command`.\n\nThis helper type can be used to annotate middleware functions that are\ndefined in one place, so that they have the correct type when passed to\n`bot.command` in a different place. For instance, this allows for more\nmodular code where handlers are defined in separate files."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "Middleware",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "CommandContext",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "C",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "C"
                    }
                  }
                ],
                "typeName": "CommandContext"
              }
            }
          ],
          "typeName": "Middleware"
        }
      },
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "class",
    "name": "Composer",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
      "line": 181,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "The composer is the heart of the middleware system in grammY. It is also the\nsuperclass of `Bot`. Whenever you call `use` or `on` or some of the other\nmethods on your bot, you are in fact using the underlying composer instance\nto register your middleware.\n\nIf you're just getting started, you do not need to worry about what\nmiddleware is, or about how to use a composer.\n\nOn the other hand, if you want to dig deeper into how grammY implements\nmiddleware, check out the\n[documentation](https://grammy.dev/advanced/middleware.html) on the website."
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": {
            "doc": "Constructs a new composer based on the provided middleware. If no\nmiddleware is given, the composer instance will simply make all context\nobjects pass through without touching them.\n",
            "tags": [
              {
                "kind": "param",
                "name": "middleware",
                "doc": "The middleware to compose"
              }
            ]
          },
          "accessibility": null,
          "hasBody": true,
          "name": "constructor",
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "middleware",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "Array",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Middleware",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "C",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "C"
                            }
                          }
                        ],
                        "typeName": "Middleware"
                      }
                    }
                  ],
                  "typeName": "Array"
                }
              }
            }
          ],
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 191,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "tsType": {
            "repr": "MiddlewareFn",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "C",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "C"
                  }
                }
              ],
              "typeName": "MiddlewareFn"
            }
          },
          "readonly": false,
          "accessibility": "private",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "handler",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 182,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "middleware",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 197,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Registers some middleware that receives all updates. It is installed by\nconcatenating it to the end of all previously installed middleware.\n\nOften, this method is used to install middleware that behaves like a\nplugin, for example session middleware.\n```ts\nbot.use(session())\n```\n\nThis method returns a new instance of composer. The returned instance can\nbe further extended, and all changes will be regarded here. Confer the\n[documentation](https://grammy.dev/advanced/middleware.html) on the\nwebsite if you want to know more about how the middleware system in\ngrammY works, especially when it comes to chaining the method calls\n(`use( ... ).use( ... ).use( ... )`).\n",
            "tags": [
              {
                "kind": "param",
                "name": "middleware",
                "doc": "The middleware to register"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "use",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "middleware",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Middleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "C",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "C"
                              }
                            }
                          ],
                          "typeName": "Middleware"
                        }
                      }
                    ],
                    "typeName": "Array"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 220,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Registers some middleware that will only be executed for some specific\nupdates, namely those matching the provided filter query. Filter queries\nare a concise way to specify which updates you are interested in.\n\nHere are some examples of valid filter queries:\n```ts\n// All kinds of message updates\nbot.on('message', ctx => { ... })\n\n// Only text messages\nbot.on('message:text', ctx => { ... })\n\n// Only text messages with URL\nbot.on('message:entities:url', ctx => { ... })\n\n// Text messages and text channel posts\nbot.on(':text', ctx => { ... })\n\n// Messages with URL in text or caption (i.e. entities or caption entities)\nbot.on('message::url', ctx => { ... })\n\n// Messages or channel posts with URL in text or caption\nbot.on('::url', ctx => { ... })\n```\n\nYou can use autocomplete in VS Code to see all available filter queries.\nCheck out the\n[documentation](https://grammy.dev/guide/filter-queries.html) on the\nwebsite to learn more about filter queries in grammY.\n\nIt is possible to pass multiple filter queries in an array, i.e.\n```ts\n// Matches all text messages and edited text messages that contain a URL\nbot.on(['message:entities:url', 'edited_message:entities:url'], ctx => { ... })\n```\n\nYour middleware will be executed if _any of the provided filter queries_\nmatches (logical OR).\n\nIf you instead want to match _all of the provided filter queries_\n(logical AND), you can chain the `.on` calls:\n```ts\n// Matches all messages and channel posts that both a) contain a URL and b) are forwards\nbot.on('::url').on(':forward_date', ctx => { ... })\n```\n",
            "tags": [
              {
                "kind": "param",
                "name": "filter",
                "doc": "The filter query to use, may also be an array of queries"
              },
              {
                "kind": "param",
                "name": "middleware",
                "doc": "The middleware to register behind the given filter"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "on",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "filter",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Q",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Q"
                      }
                    },
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "Q",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Q"
                        }
                      }
                    }
                  ]
                }
              },
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "middleware",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Middleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "Filter",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "C",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "C"
                                    }
                                  },
                                  {
                                    "repr": "Q",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "Q"
                                    }
                                  }
                                ],
                                "typeName": "Filter"
                              }
                            }
                          ],
                          "typeName": "Middleware"
                        }
                      }
                    ],
                    "typeName": "Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Composer",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Filter",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "C",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "C"
                          }
                        },
                        {
                          "repr": "Q",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Q"
                          }
                        }
                      ],
                      "typeName": "Filter"
                    }
                  }
                ],
                "typeName": "Composer"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "Q",
                "constraint": {
                  "repr": "FilterQuery",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "FilterQuery"
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 276,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Registers some middleware that will only be executed when the message\ncontains some text. Is it possible to pass a regular expression to match:\n```ts\n// Match some text (exact match)\nbot.hears('I love grammY', ctx => ctx.reply('And grammY loves you! <3'))\n// Match a regular expression\nbot.hears(/\\/echo (.+)/, ctx => ctx.reply(ctx.match[1]))\n```\nNote how `ctx.match` will contain the result of the regular expression.\nHere it is a `RegExpMatchArray` object, so `ctx.match[1]` refers to the\npart of the regex that was matched by `(.+)`, i.e. the text that comes\nafter “/echo”.\n\nYou can pass an array of triggers. Your middleware will be executed if at\nleast one of them matches.\n\nBoth text and captions of the received messages will be scanned. For\nexample, when a photo is sent to the chat and its caption matches the\ntrigger, your middleware will be executed.\n\nIf you only want to match text messages and not captions, you can do\nthis:\n```ts\n// Only matches text messages (and channel posts) for the regex\nbot.on(':text').hears(/\\/echo (.+)/, ctx => { ... })\n```\n",
            "tags": [
              {
                "kind": "param",
                "name": "trigger",
                "doc": "The text to look for"
              },
              {
                "kind": "param",
                "name": "middleware",
                "doc": "The middleware to register"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hears",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "trigger",
                "optional": false,
                "tsType": {
                  "repr": "MaybeArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "RegExp",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "RegExp"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "MaybeArray"
                  }
                }
              },
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "middleware",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "HearsMiddleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "C",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "C"
                              }
                            }
                          ],
                          "typeName": "HearsMiddleware"
                        }
                      }
                    ],
                    "typeName": "Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Composer",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "HearsContext",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "C",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "C"
                          }
                        }
                      ],
                      "typeName": "HearsContext"
                    }
                  }
                ],
                "typeName": "Composer"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 314,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Registers some middleware that will only be executed when a certain\ncommand is found.\n```ts\n// Reacts to /start commands\nbot.command('start', ctx => { ... })\n// Reacts to /help commands\nbot.command('help', ctx => { ... })\n```\n\nThe rest of the message (excluding the command, and trimmed) is provided\nvia `ctx.match`.\n\n> **Did you know?** You can use deep linking\n> (https://core.telegram.org/bots/features#deep-linking) to let users\n> start your bot with a custom payload. As an example, send someone the\n> link https://t.me/name-of-your-bot?start=custom-payload and register a\n> start command handler on your bot with grammY. As soon as the user\n> starts your bot, you will receive `custom-payload` in the `ctx.match`\n> property!\n> ```ts\n> bot.command('start', ctx => {\n>   const payload = ctx.match // will be 'custom-payload'\n> })\n> ```\n\nNote that commands are not matched in captions or in the middle of the\ntext.\n```ts\nbot.command('start', ctx => { ... })\n// ... does not match:\n// A message saying: “some text /start some more text”\n// A photo message with the caption “/start”\n```\n\nBy default, commands are detected in channel posts, too. This means that\n`ctx.message` is potentially `undefined`, so you should use `ctx.msg`\ninstead to grab both messages and channel posts. Alternatively, if you\nwant to limit your bot to finding commands only in private and group\nchats, you can use `bot.on('message').command('start', ctx => { ... })`,\nor even store a message-only version of your bot in a variable like so:\n```ts\nconst m = bot.on('message')\n\nm.command('start', ctx => { ... })\nm.command('help', ctx => { ... })\n// etc\n```\n\nIf you need more freedom matching your commands, check out the `commands`\nplugin.\n",
            "tags": [
              {
                "kind": "param",
                "name": "command",
                "doc": "The command to look for"
              },
              {
                "kind": "param",
                "name": "middleware",
                "doc": "The middleware to register"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "command",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "command",
                "optional": false,
                "tsType": {
                  "repr": "MaybeArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "StringWithSuggestions",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "S",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "S"
                                  }
                                },
                                {
                                  "repr": "start",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "start"
                                  }
                                },
                                {
                                  "repr": "help",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "help"
                                  }
                                },
                                {
                                  "repr": "settings",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "settings"
                                  }
                                }
                              ]
                            }
                          ],
                          "typeName": "StringWithSuggestions"
                        }
                      }
                    ],
                    "typeName": "MaybeArray"
                  }
                }
              },
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "middleware",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "CommandMiddleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "C",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "C"
                              }
                            }
                          ],
                          "typeName": "CommandMiddleware"
                        }
                      }
                    ],
                    "typeName": "Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Composer",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "CommandContext",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "C",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "C"
                          }
                        }
                      ],
                      "typeName": "CommandContext"
                    }
                  }
                ],
                "typeName": "Composer"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "S",
                "constraint": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ]
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 376,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Registers some middleware for certain chat types only. For example, you\ncan use this method to only receive updates from private chats. The four\nchat types are `\"channel\"`, `\"supergroup\"`, `\"group\"`, and `\"private\"`.\nThis is especially useful when combined with other filtering logic. For\nexample, this is how can you respond to `/start` commands only from\nprivate chats:\n```ts\nbot.chatType(\"private\").command(\"start\", ctx => { ... })\n```\n\nNaturally, you can also use this method on its own.\n```ts\n// Private chats only\nbot.chatType(\"private\", ctx => { ... });\n// Channels only\nbot.chatType(\"channel\", ctx => { ... });\n```\n\nYou can pass an array of chat types if you want your middleware to run\nfor any of several provided chat types.\n```ts\n// Groups and supergroups only\nbot.chatType([\"group\", \"supergroup\"], ctx => { ... });\n```\n[Remember](https://grammy.dev/guide/context.html#shortcuts) also that you\ncan access the chat type via `ctx.chat.type`.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chatType",
                "doc": "The chat type"
              },
              {
                "kind": "param",
                "name": "middleware",
                "doc": "The middleware to register"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "chatType",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chatType",
                "optional": false,
                "tsType": {
                  "repr": "MaybeArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      }
                    ],
                    "typeName": "MaybeArray"
                  }
                }
              },
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "middleware",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Middleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "ChatTypeContext",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "C",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "C"
                                    }
                                  },
                                  {
                                    "repr": "T",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "T"
                                    }
                                  }
                                ],
                                "typeName": "ChatTypeContext"
                              }
                            }
                          ],
                          "typeName": "Middleware"
                        }
                      }
                    ],
                    "typeName": "Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Composer",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "ChatTypeContext",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "C",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "C"
                          }
                        },
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        }
                      ],
                      "typeName": "ChatTypeContext"
                    }
                  }
                ],
                "typeName": "Composer"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "T",
                "constraint": {
                  "repr": "",
                  "kind": "indexedAccess",
                  "indexedAccess": {
                    "readonly": false,
                    "objType": {
                      "repr": "Chat",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Chat"
                      }
                    },
                    "indexType": {
                      "repr": "type",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "type"
                      }
                    }
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 416,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Registers some middleware for callback queries, i.e. the updates that\nTelegram delivers to your bot when a user clicks an inline button (that\nis a button under a message).\n\nThis method is essentially the same as calling\n```ts\nbot.on('callback_query:data', ctx => { ... })\n```\nbut it also allows you to match the query data against a given text or\nregular expression.\n\n```ts\n// Create an inline keyboard\nconst keyboard = new InlineKeyboard().text('Go!', 'button-payload')\n// Send a message with the keyboard\nawait bot.api.sendMessage(chat_id, 'Press a button!', {\n  reply_markup: keyboard\n})\n// Listen to users pressing buttons with that specific payload\nbot.callbackQuery('button-payload', ctx => { ... })\n\n// Listen to users pressing any button your bot ever sent\nbot.on('callback_query:data', ctx => { ... })\n```\n\nAlways remember to call `answerCallbackQuery`—even if you don't perform\nany action: https://core.telegram.org/bots/api#answercallbackquery\n```ts\nbot.on('callback_query:data', async ctx => {\n  await ctx.answerCallbackQuery()\n})\n```\n\nYou can pass an array of triggers. Your middleware will be executed if at\nleast one of them matches.\n",
            "tags": [
              {
                "kind": "param",
                "name": "trigger",
                "doc": "The string to look for in the payload"
              },
              {
                "kind": "param",
                "name": "middleware",
                "doc": "The middleware to register"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "callbackQuery",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "trigger",
                "optional": false,
                "tsType": {
                  "repr": "MaybeArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "RegExp",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "RegExp"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "MaybeArray"
                  }
                }
              },
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "middleware",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "CallbackQueryMiddleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "C",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "C"
                              }
                            }
                          ],
                          "typeName": "CallbackQueryMiddleware"
                        }
                      }
                    ],
                    "typeName": "Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Composer",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "CallbackQueryContext",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "C",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "C"
                          }
                        }
                      ],
                      "typeName": "CallbackQueryContext"
                    }
                  }
                ],
                "typeName": "Composer"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 463,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Registers some middleware for game queries, i.e. the updates that\nTelegram delivers to your bot when a user clicks an inline button for the\nHTML5 games platform on Telegram.\n\nThis method is essentially the same as calling\n```ts\nbot.on('callback_query:game_short_name', ctx => { ... })\n```\nbut it also allows you to match the query data against a given text or\nregular expression.\n\nYou can pass an array of triggers. Your middleware will be executed if at\nleast one of them matches.\n",
            "tags": [
              {
                "kind": "param",
                "name": "trigger",
                "doc": "The string to look for in the payload"
              },
              {
                "kind": "param",
                "name": "middleware",
                "doc": "The middleware to register"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "gameQuery",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "trigger",
                "optional": false,
                "tsType": {
                  "repr": "MaybeArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "RegExp",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "RegExp"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "MaybeArray"
                  }
                }
              },
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "middleware",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "GameQueryMiddleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "C",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "C"
                              }
                            }
                          ],
                          "typeName": "GameQueryMiddleware"
                        }
                      }
                    ],
                    "typeName": "Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Composer",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "GameQueryContext",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "C",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "C"
                          }
                        }
                      ],
                      "typeName": "GameQueryContext"
                    }
                  }
                ],
                "typeName": "Composer"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 488,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Registers middleware for inline queries. Telegram sends an inline query\nto your bot whenever a user types “@your_bot_name ...” into a text field\nin Telegram. You bot will then receive the entered search query and can\nrespond with a number of results (text, images, etc) that the user can\npick from to send a message _via_ your bot to the respective chat. Check\nout https://core.telegram.org/bots/inline to read more about inline bots.\n\n> Note that you have to enable inline mode for you bot by contacting\n> @BotFather first.\n\n```ts\n// Listen for users typing “@your_bot_name query”\nbot.inlineQuery('query', async ctx => {\n  // Answer the inline query, confer https://core.telegram.org/bots/api#answerinlinequery\n  await ctx.answerInlineQuery( ... )\n})\n```\n",
            "tags": [
              {
                "kind": "param",
                "name": "trigger",
                "doc": "The inline query text to match"
              },
              {
                "kind": "param",
                "name": "middleware",
                "doc": "The middleware to register"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "inlineQuery",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "trigger",
                "optional": false,
                "tsType": {
                  "repr": "MaybeArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "RegExp",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "RegExp"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "MaybeArray"
                  }
                }
              },
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "middleware",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "InlineQueryMiddleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "C",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "C"
                              }
                            }
                          ],
                          "typeName": "InlineQueryMiddleware"
                        }
                      }
                    ],
                    "typeName": "Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Composer",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "InlineQueryContext",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "C",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "C"
                          }
                        }
                      ],
                      "typeName": "InlineQueryContext"
                    }
                  }
                ],
                "typeName": "Composer"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 517,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Registers middleware for the ChosenInlineResult by the given id or ids.\nChosenInlineResult represents a result of an inline query that was\nchosen by the user and sent to their chat partner. Check out\nhttps://core.telegram.org/bots/api#choseninlineresult to read more\nabout chosen inline results.\n\n```ts\nbot.chosenInlineResult('id', async ctx => {\n  const id = ctx.result_id;\n  // Your code\n})\n```\n",
            "tags": [
              {
                "kind": "param",
                "name": "resultId",
                "doc": "An id or array of ids"
              },
              {
                "kind": "param",
                "name": "middleware",
                "doc": "The middleware to register"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "chosenInlineResult",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "resultId",
                "optional": false,
                "tsType": {
                  "repr": "MaybeArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "RegExp",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "RegExp"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "MaybeArray"
                  }
                }
              },
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "middleware",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "ChosenInlineResultMiddleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "C",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "C"
                              }
                            }
                          ],
                          "typeName": "ChosenInlineResultMiddleware"
                        }
                      }
                    ],
                    "typeName": "Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Composer",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "ChosenInlineResultContext",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "C",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "C"
                          }
                        }
                      ],
                      "typeName": "ChosenInlineResultContext"
                    }
                  }
                ],
                "typeName": "Composer"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 541,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "> This is an advanced method of grammY.\n\nRegisters middleware behind a custom filter function that operates on the\ncontext object and decides whether or not to execute the middleware. In\nother words, the middleware will only be executed if the given predicate\nreturns `true` for the given context object. Otherwise, it will be\nskipped and the next middleware will be executed.\n\nThis method has two signatures. The first one is straightforward, it is\nthe one described above. Note that the predicate may be asynchronous,\ni.e. it can return a Promise of a boolean.\n\nAlternatively, you can pass a function that has a type predicate as\nreturn type. This will allow you to narrow down the context object. The\ninstalled middleware is then able to operate on this constrained context\nobject.\n```ts\n// NORMAL USAGE\n// Only process every second update\nbot.filter(ctx => ctx.update.update_id % 2 === 0, ctx => { ... })\n\n// TYPE PREDICATE USAGE\nfunction predicate(ctx): ctx is Context & { message: undefined } {\n  return ctx.message === undefined\n}\n// Only process updates where `message` is `undefined`\nbot.filter(predicate, ctx => {\n  const m = ctx.message // inferred as always undefined!\n  const m2 = ctx.update.message // also inferred as always undefined!\n})\n```\n",
            "tags": [
              {
                "kind": "param",
                "name": "predicate",
                "doc": "The predicate to check"
              },
              {
                "kind": "param",
                "name": "middleware",
                "doc": "The middleware to register"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "filter",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "predicate",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "ctx is D",
                      "kind": "typePredicate",
                      "typePredicate": {
                        "asserts": false,
                        "param": {
                          "type": "identifier",
                          "name": "ctx"
                        },
                        "type": {
                          "repr": "D",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "D"
                          }
                        }
                      }
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "ctx",
                        "optional": false,
                        "tsType": {
                          "repr": "C",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "C"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "middleware",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Middleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "D",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "D"
                              }
                            }
                          ],
                          "typeName": "Middleware"
                        }
                      }
                    ],
                    "typeName": "Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Composer",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "D",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "D"
                    }
                  }
                ],
                "typeName": "Composer"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "D",
                "constraint": {
                  "repr": "C",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "C"
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 587,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "filter",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "predicate",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "MaybePromise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "boolean",
                            "kind": "keyword",
                            "keyword": "boolean"
                          }
                        ],
                        "typeName": "MaybePromise"
                      }
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "ctx",
                        "optional": false,
                        "tsType": {
                          "repr": "C",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "C"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "middleware",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Middleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "C",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "C"
                              }
                            }
                          ],
                          "typeName": "Middleware"
                        }
                      }
                    ],
                    "typeName": "Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Composer",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "C",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "C"
                    }
                  }
                ],
                "typeName": "Composer"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 591,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "filter",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "predicate",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "MaybePromise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "boolean",
                            "kind": "keyword",
                            "keyword": "boolean"
                          }
                        ],
                        "typeName": "MaybePromise"
                      }
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "ctx",
                        "optional": false,
                        "tsType": {
                          "repr": "C",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "C"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "middleware",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Middleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "C",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "C"
                              }
                            }
                          ],
                          "typeName": "Middleware"
                        }
                      }
                    ],
                    "typeName": "Array"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 595,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "> This is an advanced method of grammY.\n\nRegisters middleware behind a custom filter function that operates on the\ncontext object and decides whether or not to execute the middleware. In\nother words, the middleware will only be executed if the given predicate\nreturns `false` for the given context object. Otherwise, it will be\nskipped and the next middleware will be executed. Note that the predicate\nmay be asynchronous, i.e. it can return a Promise of a boolean.\n\nThis method is the same using `filter` (normal usage) with a negated\npredicate.\n",
            "tags": [
              {
                "kind": "param",
                "name": "predicate",
                "doc": "The predicate to check"
              },
              {
                "kind": "param",
                "name": "middleware",
                "doc": "The middleware to register"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "drop",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "predicate",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "MaybePromise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "boolean",
                            "kind": "keyword",
                            "keyword": "boolean"
                          }
                        ],
                        "typeName": "MaybePromise"
                      }
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "ctx",
                        "optional": false,
                        "tsType": {
                          "repr": "C",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "C"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "middleware",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Middleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "C",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "C"
                              }
                            }
                          ],
                          "typeName": "Middleware"
                        }
                      }
                    ],
                    "typeName": "Array"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 620,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "> This is an advanced method of grammY.\n\nRegisters some middleware that runs concurrently to the executing\nmiddleware stack.\n```ts\nbot.use( ... ) // will run first\nbot.fork( ... ) // will be started second, but run concurrently\nbot.use( ... ) // will also be run second\n```\nIn the first middleware, as soon as `next`'s Promise resolves, both forks\nhave completed.\n\nBoth the fork and the downstream middleware are awaited with\n`Promise.all`, so you will only be to catch up to one error (the one that\nis thrown first).\n\nIn opposite to the other middleware methods on composer, `fork` does not\nreturn simply return the composer connected to the main middleware stack.\nInstead, it returns the created composer _of the fork_ connected to the\nmiddleware stack. This allows for the following pattern.\n```ts\n// Middleware will be run concurrently!\nbot.fork().on('message', ctx => { ... })\n```\n",
            "tags": [
              {
                "kind": "param",
                "name": "middleware",
                "doc": "The middleware to run concurrently"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "fork",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "middleware",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Middleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "C",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "C"
                              }
                            }
                          ],
                          "typeName": "Middleware"
                        }
                      }
                    ],
                    "typeName": "Array"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 658,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "> This is an advanced method of grammY.\n\nExecutes some middleware that can be generated on the fly for each\ncontext. Pass a factory function that creates some middleware (or a\nmiddleware array even). The factory function will be called once per\ncontext, and its result will be executed with the context object.\n```ts\n// The middleware returned by `createMyMiddleware` will be used only once\nbot.lazy(ctx => createMyMiddleware(ctx))\n```\n\nYou may generate this middleware in an `async` fashion.\n\nYou can decide to return an empty array (`[]`) if you don't want to run\nany middleware for a given context object. This is equivalent to\nreturning an empty instance of `Composer`.\n",
            "tags": [
              {
                "kind": "param",
                "name": "middlewareFactory",
                "doc": "The factory function creating the middleware"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "lazy",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "middlewareFactory",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "MaybePromise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "MaybeArray",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "Middleware",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "C",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "C"
                                        }
                                      }
                                    ],
                                    "typeName": "Middleware"
                                  }
                                }
                              ],
                              "typeName": "MaybeArray"
                            }
                          }
                        ],
                        "typeName": "MaybePromise"
                      }
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "ctx",
                        "optional": false,
                        "tsType": {
                          "repr": "C",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "C"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Composer",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "C",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "C"
                    }
                  }
                ],
                "typeName": "Composer"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 685,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "> This is an advanced method of grammY.\n\n_Not to be confused with the `router` plugin._\n\nThis method is an alternative to the `router` plugin. It allows you to\nbranch between different middleware per context object. You can pass two\nthings to it:\n1. A routing function\n2. Different middleware identified by key\n\nThe routing function decides based on the context object which middleware\nto run. Each middleware is identified by a key, so the routing function\nsimply returns the key of that middleware.\n```ts\n// Define different route handlers\nconst routeHandlers = {\n  evenUpdates: (ctx: Context) => { ... }\n  oddUpdates: (ctx: Context) => { ... }\n}\n// Decide for a context object which one to pick\nconst router = (ctx: Context) => ctx.update.update_id % 2 === 0\n  ? 'evenUpdates'\n  : 'oddUpdates'\n// Route it!\nbot.route(router, routeHandlers)\n```\n\nOptionally, you can pass a third option that is used as fallback\nmiddleware if your route function returns `undefined`, or if the key\nreturned by your router has no middleware associated with it.\n\nThis method may need less setup than first instantiating a `Router`, but\nfor more complex setups, having a `Router` may be more readable.\n",
            "tags": [
              {
                "kind": "param",
                "name": "router",
                "doc": "The routing function to use"
              },
              {
                "kind": "param",
                "name": "routeHandlers",
                "doc": "Handlers for every route"
              },
              {
                "kind": "param",
                "name": "fallback",
                "doc": "Optional fallback middleware if no route matches"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "route",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "router",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "MaybePromise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "undefined",
                                "kind": "keyword",
                                "keyword": "undefined"
                              },
                              {
                                "repr": "",
                                "kind": "typeOperator",
                                "typeOperator": {
                                  "operator": "keyof",
                                  "tsType": {
                                    "repr": "R",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "R"
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "MaybePromise"
                      }
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "ctx",
                        "optional": false,
                        "tsType": {
                          "repr": "C",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "C"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "routeHandlers",
                "optional": false,
                "tsType": {
                  "repr": "R",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "R"
                  }
                }
              },
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "fallback",
                  "optional": false,
                  "tsType": {
                    "repr": "Middleware",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "C",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "C"
                          }
                        }
                      ],
                      "typeName": "Middleware"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": {
              "repr": "Composer",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "C",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "C"
                    }
                  }
                ],
                "typeName": "Composer"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "R",
                "constraint": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "PropertyKey",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "PropertyKey"
                        }
                      },
                      {
                        "repr": "Middleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "C",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "C"
                              }
                            }
                          ],
                          "typeName": "Middleware"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 734,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "> This is an advanced method of grammY.\n\nAllows you to branch between two cases for a given context object.\n\nThis method takes a predicate function that is tested once per context\nobject. If it returns `true`, the first supplied middleware is executed.\nIf it returns `false`, the second supplied middleware is executed. Note\nthat the predicate may be asynchronous, i.e. it can return a Promise of a\nboolean.\n",
            "tags": [
              {
                "kind": "param",
                "name": "predicate",
                "doc": "The predicate to check"
              },
              {
                "kind": "param",
                "name": "trueMiddleware",
                "doc": "The middleware for the `true` case"
              },
              {
                "kind": "param",
                "name": "falseMiddleware",
                "doc": "The middleware for the `false` case"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "branch",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "predicate",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "MaybePromise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "boolean",
                            "kind": "keyword",
                            "keyword": "boolean"
                          }
                        ],
                        "typeName": "MaybePromise"
                      }
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "ctx",
                        "optional": false,
                        "tsType": {
                          "repr": "C",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "C"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "trueMiddleware",
                "optional": false,
                "tsType": {
                  "repr": "MaybeArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Middleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "C",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "C"
                              }
                            }
                          ],
                          "typeName": "Middleware"
                        }
                      }
                    ],
                    "typeName": "MaybeArray"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "falseMiddleware",
                "optional": false,
                "tsType": {
                  "repr": "MaybeArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Middleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "C",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "C"
                              }
                            }
                          ],
                          "typeName": "Middleware"
                        }
                      }
                    ],
                    "typeName": "MaybeArray"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 762,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "> This is an advanced function of grammY.\n\nInstalls an error boundary that catches errors that happen only inside\nthe given middleware. This allows you to install custom error handlers\nthat protect some parts of your bot. Errors will not be able to bubble\nout of this part of your middleware system, unless the supplied error\nhandler rethrows them, in which case the next surrounding error boundary\nwill catch the error.\n\nExample usage:\n```ts\nfunction errHandler(err: BotError) {\n  console.error('Error boundary caught error!', err)\n}\n\nconst safe =\n  // All passed middleware will be protected by the error boundary.\n  bot.errorBoundary(errHandler, middleware0, middleware1, middleware2)\n\n// Those will also be protected!\nsafe.on('message', middleware3)\n\n// No error from `middleware4` will reach the `errHandler` from above,\n// as errors are suppressed.\n\n// do nothing on error (suppress error), and run outside middleware\nconst suppress = (_err: BotError, next: NextFunction) => { return next() }\nsafe.errorBoundary(suppress).on('edited_message', middleware4)\n```\n\nCheck out the\n[documentation](https://grammy.dev/guide/errors.html#error-boundaries) on\nthe website to learn more about error boundaries.\n",
            "tags": [
              {
                "kind": "param",
                "name": "errorHandler",
                "doc": "The error handler to use"
              },
              {
                "kind": "param",
                "name": "middleware",
                "doc": "The middleware to protect"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "errorBoundary",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "errorHandler",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "MaybePromise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        ],
                        "typeName": "MaybePromise"
                      }
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "error",
                        "optional": false,
                        "tsType": {
                          "repr": "BotError",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "C",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "C"
                                }
                              }
                            ],
                            "typeName": "BotError"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "next",
                        "optional": false,
                        "tsType": {
                          "repr": "NextFunction",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "NextFunction"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "middleware",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Middleware",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "C",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "C"
                              }
                            }
                          ],
                          "typeName": "Middleware"
                        }
                      }
                    ],
                    "typeName": "Array"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 810,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [
        {
          "repr": "MiddlewareObj",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "C",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "C"
                }
              }
            ],
            "typeName": "MiddlewareObj"
          }
        }
      ],
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ],
      "superTypeParams": []
    }
  },
  {
    "kind": "typeAlias",
    "name": "GameQueryMiddleware",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
      "line": 876,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Type of the middleware that can be passed to `bot.gameQuery`.\n\nThis helper type can be used to annotate middleware functions that are\ndefined in one place, so that they have the correct type when passed to\n`bot.gameQuery` in a different place. For instance, this allows for more\nmodular code where handlers are defined in separate files."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "Middleware",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "GameQueryContext",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "C",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "C"
                    }
                  }
                ],
                "typeName": "GameQueryContext"
              }
            }
          ],
          "typeName": "Middleware"
        }
      },
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "typeAlias",
    "name": "HearsMiddleware",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
      "line": 843,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Type of the middleware that can be passed to `bot.hears`.\n\nThis helper type can be used to annotate middleware functions that are\ndefined in one place, so that they have the correct type when passed to\n`bot.hears` in a different place. For instance, this allows for more modular\ncode where handlers are defined in separate files."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "Middleware",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "HearsContext",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "C",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "C"
                    }
                  }
                ],
                "typeName": "HearsContext"
              }
            }
          ],
          "typeName": "Middleware"
        }
      },
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "typeAlias",
    "name": "InlineQueryMiddleware",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
      "line": 887,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Type of the middleware that can be passed to `bot.inlineQuery`.\n\nThis helper type can be used to annotate middleware functions that are\ndefined in one place, so that they have the correct type when passed to\n`bot.inlineQuery` in a different place. For instance, this allows for more\nmodular code where handlers are defined in separate files."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "Middleware",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "InlineQueryContext",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "C",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "C"
                    }
                  }
                ],
                "typeName": "InlineQueryContext"
              }
            }
          ],
          "typeName": "Middleware"
        }
      },
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "typeAlias",
    "name": "Middleware",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
      "line": 88,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Middleware for grammY, either as a function or as a container for a function.\n\nSimply put, middleware is just a fancy term for a _listener_. You can\nregister middleware on a bot to listen for updates. Example:\n\n```ts\nbot.on('message', ctx => ctx.reply('I got your message!'))\n//                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//                ^\n//                |\n//               This is middleware!\n```\n\nMiddleware receives one object that we call the _context object_. This is\nanother fancy term for a simple object that holds information about the\nupdate you're processing. For instance, the context object gives you access\nto the message that was sent to your bot (`ctx.message`), including the text\n(or photo or whatever message the user has sent). The context object is\ncommonly named `ctx`.\n\nIt also provides you with the `ctx.api` object that you also find on\n`bot.api`. As a result, you can call `ctx.api.sendMessage` instead of\n`bot.api.sendMessage`. This prevents you from having to pass around your\n`bot` instance all over your code.\n\nMost importantly, the context object gives you a handful of really useful\nshortcuts, such as a `reply` method (see above). This method is nothing else\nthan a wrapper around `ctx.api.sendMessage`—but with some arguments\npre-filled for you. As you can see above, you no longer have to specify a\n`chat_id` or anything; the context object knows which chat it belongs to, so\nwhen you call `reply`, the context will call `sendMessage` with the correct\n`chat_id`, namely the one for the same chat that the incoming message\noriginates from. This makes it very convenient to reply to a message.\n\nMiddleware is an extremely powerful concept and this short explanation only\nscratched the surface of what is possible with grammY. If you want to know\nmore advanced things about middleware, check out the\n[documentation](https://grammy.dev/guide/middleware.html) on the website."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "",
        "kind": "union",
        "union": [
          {
            "repr": "MiddlewareFn",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "C",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "C"
                  }
                }
              ],
              "typeName": "MiddlewareFn"
            }
          },
          {
            "repr": "MiddlewareObj",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "C",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "C"
                  }
                }
              ],
              "typeName": "MiddlewareObj"
            }
          }
        ]
      },
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          },
          "default": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "typeAlias",
    "name": "MiddlewareFn",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
      "line": 35,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Middleware in the form of a function."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "",
        "kind": "fnOrConstructor",
        "fnOrConstructor": {
          "constructor": false,
          "tsType": {
            "repr": "MaybePromise",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                }
              ],
              "typeName": "MaybePromise"
            }
          },
          "params": [
            {
              "kind": "identifier",
              "name": "ctx",
              "optional": false,
              "tsType": {
                "repr": "C",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "C"
                }
              }
            },
            {
              "kind": "identifier",
              "name": "next",
              "optional": false,
              "tsType": {
                "repr": "NextFunction",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "NextFunction"
                }
              }
            }
          ],
          "typeParams": []
        }
      },
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          },
          "default": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "interface",
    "name": "MiddlewareObj",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
      "line": 42,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Middleware in the form of a container for a function."
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "middleware",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
            "line": 46,
            "col": 2
          },
          "jsDoc": {
            "doc": "Returns the contained middleware."
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "MiddlewareFn",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "C",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "C"
                      }
                    }
                  ],
                  "typeName": "MiddlewareFn"
                }
              },
              "params": [],
              "typeParams": []
            }
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          },
          "default": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "typeAlias",
    "name": "NextFunction",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/composer.ts",
      "line": 30,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "A function of this type is passed as the second parameter to all middleware.\nInvoke it to call the downstream middleware and pass on the control flow.\n\nIn other words, if your middleware is done handling the context object, and\nother middleware should take over, this function should be called and\n`await`ed.\n\nOnce the `Promise` returned by this function resolves, the downstream\nmiddleware is done executing, hence returning the control."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "",
        "kind": "fnOrConstructor",
        "fnOrConstructor": {
          "constructor": false,
          "tsType": {
            "repr": "Promise",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                }
              ],
              "typeName": "Promise"
            }
          },
          "params": [],
          "typeParams": []
        }
      },
      "typeParams": []
    }
  },
  {
    "kind": "typeAlias",
    "name": "Filter",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/filter.ts",
      "line": 463,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "This type infers which properties will be present on the given context object\nprovided it matches the given filter query. If the filter query is a union\ntype, the produced context object will be a union of possible combinations,\nhence allowing you to narrow down manually which of the properties are\npresent.\n\nIn some sense, this type computes `matchFilter` on the type level."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "PerformQuery",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "C",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "C"
              }
            },
            {
              "repr": "RunQuery",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "ExpandShortcuts",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Q",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Q"
                          }
                        }
                      ],
                      "typeName": "ExpandShortcuts"
                    }
                  }
                ],
                "typeName": "RunQuery"
              }
            }
          ],
          "typeName": "PerformQuery"
        }
      },
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        },
        {
          "name": "Q",
          "constraint": {
            "repr": "FilterQuery",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "FilterQuery"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "typeAlias",
    "name": "FilterQuery",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/filter.ts",
      "line": 394,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Represents a filter query that can be passed to `bot.on`. There are three\ndifferent kinds of filter queries: Level 1, Level 2, and Level 3. Check out\nthe [website](https://grammy.dev/guide/filter-queries.html) to read about how\nfilter queries work in grammY, and how to use them.\n\nHere are three brief examples:\n```ts\n// Listen for messages of any type (Level 1)\nbot.on('message', ctx => { ... })\n// Listen for audio messages only (Level 2)\nbot.on('message:audio', ctx => { ... })\n// Listen for text messages that have a URL entity (Level 3)\nbot.on('message:entities:url', ctx => { ... })\n```"
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "AllValidFilterQueries",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": null,
          "typeName": "AllValidFilterQueries"
        }
      },
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "matchFilter",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/filter.ts",
      "line": 31,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "> This is an advanced function of grammY.\n\nTakes a filter query and turns it into a predicate function that can check in\nconstant time whether a given context object satisfies the query. The created\npredicate can be passed to `bot.filter` and will narrow down the context\naccordingly.\n\nThis function is used internally by `bot.on` but exposed for advanced usage\nlike the following.\n```ts\n// Listens for updates except forwards of messages or channel posts\nbot.drop(matchFilter(':forward_date'), ctx => { ... })\n```\n\nCheck out the\n[documentation](https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/Composer)\nof `bot.on` for examples. In addition, the\n[website](https://grammy.dev/guide/filter-queries.html) contains more\ninformation about how filter queries work in grammY.\n",
      "tags": [
        {
          "kind": "param",
          "name": "filter",
          "doc": "A filter query or an array of filter queries"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "filter",
          "optional": false,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "Q",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Q"
                }
              },
              {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "Q",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Q"
                  }
                }
              }
            ]
          }
        }
      ],
      "returnType": {
        "repr": "FilterFunction",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "C",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "C"
              }
            },
            {
              "repr": "Filter",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "C",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "C"
                    }
                  },
                  {
                    "repr": "Q",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Q"
                    }
                  }
                ],
                "typeName": "Filter"
              }
            }
          ],
          "typeName": "FilterFunction"
        }
      },
      "hasBody": true,
      "isAsync": false,
      "isGenerator": false,
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        },
        {
          "name": "Q",
          "constraint": {
            "repr": "FilterQuery",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "FilterQuery"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "class",
    "name": "Api",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
      "line": 54,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "This class provides access to the full Telegram Bot API. All methods of the\nAPI have an equivalent on this class, with the most important parameters\npulled up into the function signature, and the other parameters captured by\nan object.\n\nIn addition, this class has a property `raw` that provides raw access to the\ncomplete Telegram API, with the method signatures 1:1 represented as\ndocumented on the website (https://core.telegram.org/bots/api).\n\nEvery method takes an optional `AbortSignal` object that allows you to cancel\nthe request if desired.\n\nIn advanced use cases, this class allows to install transformers that can\nmodify the method and payload on the fly before sending it to the Telegram\nservers. Confer the `config` property for this."
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "hasBody": true,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "token",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "config",
              "optional": true,
              "tsType": {
                "repr": "ApiClientOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ApiClientOptions"
                }
              }
            },
            {
              "kind": "identifier",
              "name": "webhookReplyEnvelope",
              "optional": true,
              "tsType": {
                "repr": "WebhookReplyEnvelope",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WebhookReplyEnvelope"
                }
              }
            }
          ],
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 92,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": {
            "doc": "Provides access to all methods of the Telegram Bot API exactly as\ndocumented on the website (https://core.telegram.org/bots/api). No\narguments are pulled up in the function signature for convenience.\n\nIf you suppress compiler warnings, this also allows for raw api calls to\nundocumented methods with arbitrary parameters—use only if you know what\nyou are doing."
          },
          "tsType": {
            "repr": "R",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "R"
            }
          },
          "readonly": true,
          "accessibility": "public",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "raw",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 64,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Configuration object for the API instance, used as a namespace to\nseparate those API operations that are related to grammY from methods of\nthe Telegram Bot API. Contains advanced options!"
          },
          "tsType": {
            "repr": "",
            "kind": "typeLiteral",
            "typeLiteral": {
              "methods": [],
              "properties": [
                {
                  "name": "use",
                  "params": [],
                  "readonly": true,
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "TransformerConsumer",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "R",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "R"
                          }
                        }
                      ],
                      "typeName": "TransformerConsumer"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "installedTransformers",
                  "params": [],
                  "readonly": true,
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "Transformer",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "R",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "R"
                                }
                              }
                            ],
                            "typeName": "Transformer"
                          }
                        }
                      },
                      "params": [],
                      "typeParams": []
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": []
            }
          },
          "readonly": true,
          "accessibility": "public",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "config",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 71,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": {
            "doc": "Use this method to receive incoming updates using long polling (wiki). Returns an Array of Update objects.\n\nNotes\n1. This method will not work if an outgoing webhook is set up.\n2. In order to avoid getting duplicate updates, recalculate offset after each server response.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getupdates"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getUpdates",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "getUpdates",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "getUpdates"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 121,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized Update. In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns True on success.\n\nIf you'd like to make sure that the webhook was set by you, you can specify secret data in the parameter secret_token. If specified, the request will contain a header “X-Telegram-Bot-Api-Secret-Token” with the secret token as content.\n\nNotes\n1. You will not be able to receive updates using getUpdates for as long as an outgoing webhook is set up.\n2. To use a self-signed certificate, you need to upload your public key certificate using certificate parameter. Please upload as InputFile, sending a String will not work.\n3. Ports currently supported for Webhooks: 443, 80, 88, 8443.\n\nIf you're having any trouble setting up webhooks, please check out this amazing guide to webhooks.\n",
            "tags": [
              {
                "kind": "param",
                "name": "url",
                "doc": "HTTPS url to send updates to. Use an empty string to remove webhook integration"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setwebhook"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setWebhook",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "url",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "setWebhook",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "setWebhook"
                        }
                      },
                      {
                        "repr": "url",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "url"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 143,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to remove webhook integration if you decide to switch back to getUpdates. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#deletewebhook"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "deleteWebhook",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "deleteWebhook",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "deleteWebhook"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 159,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using getUpdates, will return an object with the url field empty.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getwebhookinfo"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getWebhookInfo",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 170,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "A simple method for testing your bot's authentication token. Requires no parameters. Returns basic information about the bot in form of a User object.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getme"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getMe",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 181,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to log out from the cloud Bot API server before launching the bot locally. You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns True on success. Requires no parameters.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#logout"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "logOut",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 192,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns True on success. Requires no parameters.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#close"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "close",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 203,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send text messages. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "text",
                "doc": "Text of the message to be sent, 1-4096 characters after entities parsing"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendmessage"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sendMessage",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "sendMessage",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendMessage"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "text",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "text"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 217,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to forward messages of any kind. Service messages can't be forwarded. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "from_chat_id",
                "doc": "Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "message_id",
                "doc": "Message identifier in the chat specified in from_chat_id"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#forwardmessage"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "forwardMessage",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "from_chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "message_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "forwardMessage",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "forwardMessage"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "from_chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "from_chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 237,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to copy messages of any kind. Service messages and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message. Returns the MessageId of the sent message on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "from_chat_id",
                "doc": "Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "message_id",
                "doc": "Message identifier in the chat specified in from_chat_id"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#copymessage"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "copyMessage",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "from_chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "message_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "copyMessage",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "copyMessage"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "from_chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "from_chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 265,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send photos. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "photo",
                "doc": "Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendphoto"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sendPhoto",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "photo",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "InputFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InputFile"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "sendPhoto",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendPhoto"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "photo",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "photo"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 292,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.\n\nFor sending voice messages, use the sendVoice method instead.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "audio",
                "doc": "Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendaudio"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sendAudio",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "audio",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "InputFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InputFile"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "sendAudio",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendAudio"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "audio",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "audio"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 313,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "document",
                "doc": "File to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#senddocument"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sendDocument",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "document",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "InputFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InputFile"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "sendDocument",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendDocument"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "document",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "document"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 332,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "video",
                "doc": "Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendvideo"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sendVideo",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "video",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "InputFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InputFile"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "sendVideo",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendVideo"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "video",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "video"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 351,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent Message is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "animation",
                "doc": "Animation to send. Pass a file_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendanimation"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sendAnimation",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "animation",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "InputFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InputFile"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "sendAnimation",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendAnimation"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "animation",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "animation"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 370,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "voice",
                "doc": "Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendvoice"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sendVoice",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "voice",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "InputFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InputFile"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "sendVoice",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendVoice"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "voice",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "voice"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 389,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send video messages. On success, the sent Message is returned.\nAs of v.4.0, Telegram clients support rounded square mp4 videos of up to 1 minute long.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "video_note",
                "doc": "Video note to send. Pass a file_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data.. Sending video notes by a URL is currently unsupported"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendvideonote"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sendVideoNote",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "video_note",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "InputFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InputFile"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "sendVideoNote",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendVideoNote"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "video_note",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "video_note"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 409,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of Messages that were sent is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "media",
                "doc": "An array describing messages to be sent, must include 2-10 items"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendmediagroup"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sendMediaGroup",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "media",
                "optional": false,
                "tsType": {
                  "repr": "ReadonlyArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "InputMediaAudio",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InputMediaAudio"
                            }
                          },
                          {
                            "repr": "InputMediaDocument",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InputMediaDocument"
                            }
                          },
                          {
                            "repr": "InputMediaPhoto",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InputMediaPhoto"
                            }
                          },
                          {
                            "repr": "InputMediaVideo",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InputMediaVideo"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "ReadonlyArray"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "sendMediaGroup",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendMediaGroup"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "media",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "media"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 431,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send point on the map. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "latitude",
                "doc": "Latitude of the location"
              },
              {
                "kind": "param",
                "name": "longitude",
                "doc": "Longitude of the location"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendlocation"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sendLocation",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "latitude",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "longitude",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "sendLocation",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendLocation"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "latitude",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "latitude"
                            }
                          },
                          {
                            "repr": "longitude",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "longitude"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 456,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "message_id",
                "doc": "Identifier of the message to edit"
              },
              {
                "kind": "param",
                "name": "latitude",
                "doc": "Latitude of new location"
              },
              {
                "kind": "param",
                "name": "longitude",
                "doc": "Longitude of new location"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editmessagelivelocation"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editMessageLiveLocation",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "message_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "latitude",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "longitude",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "editMessageLiveLocation",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editMessageLiveLocation"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          },
                          {
                            "repr": "latitude",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "latitude"
                            }
                          },
                          {
                            "repr": "longitude",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "longitude"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 481,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to edit live location inline messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "inline_message_id",
                "doc": "Identifier of the inline message"
              },
              {
                "kind": "param",
                "name": "latitude",
                "doc": "Latitude of new location"
              },
              {
                "kind": "param",
                "name": "longitude",
                "doc": "Longitude of new location"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editmessagelivelocation"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editMessageLiveLocationInline",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "inline_message_id",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "latitude",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "longitude",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "editMessageLiveLocation",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editMessageLiveLocation"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          },
                          {
                            "repr": "latitude",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "latitude"
                            }
                          },
                          {
                            "repr": "longitude",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "longitude"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 514,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to stop updating a live location message before live_period expires. On success, if the message is not an inline message, the edited Message is returned, otherwise True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "message_id",
                "doc": "Identifier of the message with live location to stop"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#stopmessagelivelocation"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "stopMessageLiveLocation",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "message_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "stopMessageLiveLocation",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "stopMessageLiveLocation"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 545,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to stop updating a live location message before live_period expires. On success, if the message is not an inline message, the edited Message is returned, otherwise True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "inline_message_id",
                "doc": "Identifier of the inline message"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#stopmessagelivelocation"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "stopMessageLiveLocationInline",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "inline_message_id",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "stopMessageLiveLocation",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "stopMessageLiveLocation"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 570,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send information about a venue. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "latitude",
                "doc": "Latitude of the venue"
              },
              {
                "kind": "param",
                "name": "longitude",
                "doc": "Longitude of the venue"
              },
              {
                "kind": "param",
                "name": "title",
                "doc": "Name of the venue"
              },
              {
                "kind": "param",
                "name": "address",
                "doc": "Address of the venue"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendvenue"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sendVenue",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "latitude",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "longitude",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "title",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "address",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "sendVenue",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendVenue"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "latitude",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "latitude"
                            }
                          },
                          {
                            "repr": "longitude",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "longitude"
                            }
                          },
                          {
                            "repr": "title",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "title"
                            }
                          },
                          {
                            "repr": "address",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "address"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 598,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send phone contacts. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "phone_number",
                "doc": "Contact's phone number"
              },
              {
                "kind": "param",
                "name": "first_name",
                "doc": "Contact's first name"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendcontact"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sendContact",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "phone_number",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "first_name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "sendContact",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendContact"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "phone_number",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "phone_number"
                            }
                          },
                          {
                            "repr": "first_name",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "first_name"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 628,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send a native poll. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "question",
                "doc": "Poll question, 1-300 characters"
              },
              {
                "kind": "param",
                "name": "options",
                "doc": "A list of answer options, 2-10 strings 1-100 characters each"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendpoll"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sendPoll",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "question",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "readonly",
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "sendPoll",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendPoll"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "question",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "question"
                            }
                          },
                          {
                            "repr": "options",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "options"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 656,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send an animated emoji that will display a random value. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "emoji",
                "doc": "Emoji on which the dice throw animation is based. Currently, must be one of “🎲”, “🎯”, “🏀”, “⚽”, or “🎰”. Dice can have values 1-6 for “🎲” and “🎯”, values 1-5 for “🏀” and “⚽”, and values 1-64 for “🎰”. Defaults to “🎲”"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#senddice"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sendDice",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "emoji",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "sendDice",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendDice"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "emoji",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "emoji"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 679,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success.\n\nExample: The ImageBot needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use sendChatAction with action = upload_photo. The user will see a “sending photo” status for the bot.\n\nWe only recommend using this method when a response from the bot will take a noticeable amount of time to arrive.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "action",
                "doc": "Type of action to broadcast. Choose one, depending on what the user is about to receive: typing for text messages, upload_photo for photos, record_video or upload_video for videos, record_voice or upload_voice for voice notes, upload_document for general files, choose_sticker for stickers, find_location for location data, record_video_note or upload_video_note for video notes."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendchataction"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sendChatAction",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "action",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "typing",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "typing"
                      }
                    },
                    {
                      "repr": "upload_photo",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "upload_photo"
                      }
                    },
                    {
                      "repr": "record_video",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "record_video"
                      }
                    },
                    {
                      "repr": "upload_video",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "upload_video"
                      }
                    },
                    {
                      "repr": "record_voice",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "record_voice"
                      }
                    },
                    {
                      "repr": "upload_voice",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "upload_voice"
                      }
                    },
                    {
                      "repr": "upload_document",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "upload_document"
                      }
                    },
                    {
                      "repr": "choose_sticker",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "choose_sticker"
                      }
                    },
                    {
                      "repr": "find_location",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "find_location"
                      }
                    },
                    {
                      "repr": "record_video_note",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "record_video_note"
                      }
                    },
                    {
                      "repr": "upload_video_note",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "upload_video_note"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "sendChatAction",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendChatAction"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "action",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "action"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 702,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object.\n",
            "tags": [
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Unique identifier of the target user"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getuserprofilephotos"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getUserProfilePhotos",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "getUserProfilePhotos",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "getUserProfilePhotos"
                        }
                      },
                      {
                        "repr": "user_id",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "user_id"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 731,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile again.\n\nNote: This function may not preserve the original file name and MIME type. You should save the file's MIME type and name (if available) when the File object is received.\n",
            "tags": [
              {
                "kind": "param",
                "name": "file_id",
                "doc": "File identifier to get info about"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getfile"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getFile",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "file_id",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 749,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "tags": [
              {
                "kind": "deprecated",
                "doc": "Use `banChatMember` instead."
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "kickChatMember",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "args",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Parameters",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "Api",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Api"
                            }
                          },
                          "indexType": {
                            "repr": "banChatMember",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "banChatMember"
                            }
                          }
                        }
                      }
                    ],
                    "typeName": "Parameters"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 754,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Unique identifier of the target user"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#banchatmember"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "banChatMember",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "banChatMember",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "banChatMember"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "user_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "user_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 768,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to unban a previously banned user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be removed from the chat. If you don't want this, use the parameter only_if_banned. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target group or username of the target supergroup or channel (in the format @username)"
              },
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Unique identifier of the target user"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#unbanchatmember"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "unbanChatMember",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "unbanChatMember",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "unbanChatMember"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "user_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "user_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 787,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass True for all permissions to lift restrictions from a user. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
              },
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Unique identifier of the target user"
              },
              {
                "kind": "param",
                "name": "permissions",
                "doc": "An object for new user permissions"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#restrictchatmember"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "restrictChatMember",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "permissions",
                "optional": false,
                "tsType": {
                  "repr": "ChatPermissions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ChatPermissions"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "restrictChatMember",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "restrictChatMember"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "user_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "user_id"
                            }
                          },
                          {
                            "repr": "permissions",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "permissions"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 807,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass False for all boolean parameters to demote a user. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Unique identifier of the target user"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#promotechatmember"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "promoteChatMember",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "promoteChatMember",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "promoteChatMember"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "user_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "user_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 834,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
              },
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Unique identifier of the target user"
              },
              {
                "kind": "param",
                "name": "custom_title",
                "doc": "New custom title for the administrator; 0-16 characters, emoji are not allowed"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setchatadministratorcustomtitle"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setChatAdministratorCustomTitle",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "custom_title",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 856,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to ban a channel chat in a supergroup or a channel. Until the chat is unbanned, the owner of the banned chat won't be able to send messages on behalf of any of their channels. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "sender_chat_id",
                "doc": "Unique identifier of the target sender chat"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#banchatsenderchat"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "banChatSenderChat",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "sender_chat_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 877,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "sender_chat_id",
                "doc": "Unique identifier of the target sender chat"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#unbanchatsenderchat"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "unbanChatSenderChat",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "sender_chat_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 894,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
              },
              {
                "kind": "param",
                "name": "permissions",
                "doc": "New default chat permissions"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setchatpermissions"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setChatPermissions",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "permissions",
                "optional": false,
                "tsType": {
                  "repr": "ChatPermissions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ChatPermissions"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 914,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the new invite link as String on success.\n\nNote: Each administrator in a chat generates their own invite links. Bots can't use invite links generated by other administrators. If you want your bot to work with invite links, it will need to generate its own link using exportChatInviteLink or by calling the getChat method. If your bot needs to generate a new primary invite link replacing its previous one, use exportChatInviteLink again.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#exportchatinvitelink"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "exportChatInviteLink",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 932,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#createchatinvitelink"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "createChatInviteLink",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "createChatInviteLink",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "createChatInviteLink"
                        }
                      },
                      {
                        "repr": "chat_id",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "chat_id"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 945,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a ChatInviteLink object.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "invite_link",
                "doc": "The invite link to edit"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editchatinvitelink"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editChatInviteLink",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "invite_link",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "editChatInviteLink",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editChatInviteLink"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "invite_link",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "invite_link"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 963,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as ChatInviteLink object.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier of the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "invite_link",
                "doc": "The invite link to revoke"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#revokechatinvitelink"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "revokeChatInviteLink",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "invite_link",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 984,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Unique identifier of the target user"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#approvechatjoinrequest"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "approveChatJoinRequest",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1001,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Unique identifier of the target user"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#declinechatjoinrequest"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "declineChatJoinRequest",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1018,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "photo",
                "doc": "New chat photo, uploaded using multipart/form-data"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setchatphoto"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setChatPhoto",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "photo",
                "optional": false,
                "tsType": {
                  "repr": "InputFile",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "InputFile"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1035,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#deletechatphoto"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "deleteChatPhoto",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1051,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "title",
                "doc": "New chat title, 1-255 characters"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setchattitle"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setChatTitle",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "title",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1064,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "description",
                "doc": "New chat description, 0-255 characters"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setchatdescription"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setChatDescription",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "description",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1081,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "message_id",
                "doc": "Identifier of a message to pin"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#pinchatmessage"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "pinChatMessage",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "message_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "pinChatMessage",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "pinChatMessage"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1099,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "message_id",
                "doc": "Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#unpinchatmessage"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "unpinChatMessage",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "message_id",
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1121,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#unpinallchatmessages"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "unpinAllChatMessages",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1137,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method for your bot to leave a group, supergroup or channel. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#leavechat"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "leaveChat",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1149,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getchat"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getChat",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1161,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get a list of administrators in a chat, which aren't bots. Returns an Array of ChatMember objects.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getchatadministrators"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getChatAdministrators",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1173,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "tags": [
              {
                "kind": "deprecated",
                "doc": "Use `getChatMemberCount` instead."
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getChatMembersCount",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "args",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "Parameters",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "Api",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Api"
                            }
                          },
                          "indexType": {
                            "repr": "getChatMemberCount",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "getChatMemberCount"
                            }
                          }
                        }
                      }
                    ],
                    "typeName": "Parameters"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1178,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get the number of members in a chat. Returns Int on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getchatmembercount"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getChatMemberCount",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1190,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get information about a member of a chat. The method is guaranteed to work only if the bot is an administrator in the chat. Returns a ChatMember object on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Unique identifier of the target user"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getchatmember"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getChatMember",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1203,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set ly returned in getChat requests to check if the bot can use this method. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
              },
              {
                "kind": "param",
                "name": "sticker_set_name",
                "doc": "Name of the sticker set to be set as the group sticker set"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setchatstickerset"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setChatStickerSet",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "sticker_set_name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1220,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set ly returned in getChat requests to check if the bot can use this method. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#deletechatstickerset"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "deleteChatStickerSet",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1239,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user. Requires no parameters. Returns an Array of Sticker objects.\n",
            "tags": [
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getforumtopiciconstickers"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getForumTopicIconStickers",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1250,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns information about the created topic as a ForumTopic object.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
              },
              {
                "kind": "param",
                "name": "name",
                "doc": "Topic name, 1-128 characters"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#createforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "createForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "createForumTopic",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "createForumTopic"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "name",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "name"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1264,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
              },
              {
                "kind": "param",
                "name": "message_thread_id",
                "doc": "Unique identifier for the target message thread of the forum topic"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "message_thread_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "editForumTopic",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editForumTopic"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_thread_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_thread_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1283,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
              },
              {
                "kind": "param",
                "name": "message_thread_id",
                "doc": "Unique identifier for the target message thread of the forum topic"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#closeforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "closeForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "message_thread_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1304,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
              },
              {
                "kind": "param",
                "name": "message_thread_id",
                "doc": "Unique identifier for the target message thread of the forum topic"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#reopenforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "reopenForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "message_thread_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1321,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
              },
              {
                "kind": "param",
                "name": "message_thread_id",
                "doc": "Unique identifier for the target message thread of the forum topic"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#deleteforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "deleteForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "message_thread_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1341,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
              },
              {
                "kind": "param",
                "name": "message_thread_id",
                "doc": "Unique identifier for the target message thread of the forum topic"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#unpinallforumtopicmessages"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "unpinAllForumTopicMessages",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "message_thread_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1361,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
              },
              {
                "kind": "param",
                "name": "name",
                "doc": "New topic name, 1-128 characters"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editgeneralforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editGeneralForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1381,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#closegeneralforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "closeGeneralForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1397,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically unhidden if it was hidden. Returns True on success.     *\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#reopengeneralforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "reopenGeneralForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1409,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically closed if it was open. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#hidegeneralforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hideGeneralForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1421,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#unhidegeneralforumtopic"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "unhideGeneralForumTopic",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1433,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to clear the list of pinned messages in a General forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#unpinallgeneralforumtopicmessages"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "unpinAllGeneralForumTopicMessages",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1445,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned.\n\nAlternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via @BotFather and accept the terms. Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter.\n",
            "tags": [
              {
                "kind": "param",
                "name": "callback_query_id",
                "doc": "Unique identifier for the query to be answered"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#answercallbackquery"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "answerCallbackQuery",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "callback_query_id",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "answerCallbackQuery",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "answerCallbackQuery"
                        }
                      },
                      {
                        "repr": "callback_query_id",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "callback_query_id"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1463,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to change the bot's name. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "name",
                "doc": "New bot name; 0-64 characters. Pass an empty string to remove the dedicated name for the given language."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setmyname"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setMyName",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "setMyName",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "setMyName"
                        }
                      },
                      {
                        "repr": "name",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "name"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1483,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get the current bot name for the given user language. Returns BotName on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getmyname"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getMyName",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "getMyName",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "getMyName"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1499,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to change the list of the bot's commands. See https://core.telegram.org/bots/features#commands for more details about bot commands. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "commands",
                "doc": "A list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setmycommands"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setMyCommands",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "commands",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "readonly",
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "BotCommand",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "BotCommand"
                        }
                      }
                    }
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "setMyCommands",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "setMyCommands"
                        }
                      },
                      {
                        "repr": "commands",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "commands"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1512,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, higher level commands will be shown to affected users. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#deletemycommands"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "deleteMyCommands",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "deleteMyCommands",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "deleteMyCommands"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1528,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get the current list of the bot's commands for the given scope and user language. Returns an Array of BotCommand objects. If commands aren't set, an empty list is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getmycommands"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getMyCommands",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "getMyCommands",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "getMyCommands"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1543,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "description",
                "doc": "New bot description; 0-512 characters. Pass an empty string to remove the dedicated description for the given language."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining paramters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setmydescription"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setMyDescription",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "description",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "setMyDescription",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "setMyDescription"
                        }
                      },
                      {
                        "repr": "description",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "description"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1556,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get the current bot description for the given user language. Returns BotDescription on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining paramters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getmydescription"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getMyDescription",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "getMyDescription",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "getMyDescription"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1572,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to change the bot's short description, which is shown on the bot's profile page and is sent together with the link when users share the bot. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "short_description",
                "doc": "New short description for the bot; 0-120 characters. Pass an empty string to remove the dedicated short description for the given language."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining paramters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setmyshortdescription"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setMyShortDescription",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "short_description",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "setMyShortDescription",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "setMyShortDescription"
                        }
                      },
                      {
                        "repr": "short_description",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "short_description"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1588,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get the current bot short description for the given user language. Returns BotShortDescription on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining paramters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getmyshortdescription"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getMyShortDescription",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "getMyShortDescription",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "getMyShortDescription"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1607,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to change the bot's menu button in a private chat, or the default menu button. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setchatmenubutton"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setChatMenuButton",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "setChatMenuButton",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "setChatMenuButton"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1622,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get the current value of the bot's menu button in a private chat, or the default menu button. Returns MenuButton on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getchatmenubutton"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getChatMenuButton",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "getChatMenuButton",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "getChatMenuButton"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1637,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to the change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are are free to modify the list before adding the bot. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setmydefaultadministratorrights"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setMyDefaultAdministratorRights",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "setMyDefaultAdministratorRights",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "setMyDefaultAdministratorRights"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1652,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get the current default administrator rights of the bot. Returns ChatAdministratorRights on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getmydefaultadministratorrights"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getMyDefaultAdministratorRights",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "getMyDefaultAdministratorRights",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "getMyDefaultAdministratorRights"
                        }
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1667,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to edit text and game messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "message_id",
                "doc": "Identifier of the message to edit"
              },
              {
                "kind": "param",
                "name": "text",
                "doc": "New text of the message, 1-4096 characters after entities parsing"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editmessagetext"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editMessageText",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "message_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "editMessageText",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editMessageText"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          },
                          {
                            "repr": "text",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "text"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1685,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to edit text and game inline messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "inline_message_id",
                "doc": "Identifier of the inline message"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editmessagetext"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editMessageTextInline",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "inline_message_id",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "editMessageText",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editMessageText"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          },
                          {
                            "repr": "text",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "text"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1711,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "message_id",
                "doc": "Identifier of the message to edit"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editmessagecaption"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editMessageCaption",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "message_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "editMessageCaption",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editMessageCaption"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1737,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to edit captions of inline messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "inline_message_id",
                "doc": "Identifier of the inline message"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editmessagecaption"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editMessageCaptionInline",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "inline_message_id",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "editMessageCaption",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editMessageCaption"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1762,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its file_id or specify a URL. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "message_id",
                "doc": "Identifier of the message to edit"
              },
              {
                "kind": "param",
                "name": "media",
                "doc": "An object for a new media content of the message"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editmessagemedia"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editMessageMedia",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "message_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "media",
                "optional": false,
                "tsType": {
                  "repr": "InputMedia",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "InputMedia"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "editMessageMedia",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editMessageMedia"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          },
                          {
                            "repr": "media",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "media"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1788,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its file_id or specify a URL. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "inline_message_id",
                "doc": "Identifier of the inline message"
              },
              {
                "kind": "param",
                "name": "media",
                "doc": "An object for a new media content of the message"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editmessagemedia"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editMessageMediaInline",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "inline_message_id",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "media",
                "optional": false,
                "tsType": {
                  "repr": "InputMedia",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "InputMedia"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "editMessageMedia",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editMessageMedia"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          },
                          {
                            "repr": "media",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "media"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1815,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "message_id",
                "doc": "Identifier of the message to edit"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editmessagereplymarkup"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editMessageReplyMarkup",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "message_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "editMessageReplyMarkup",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editMessageReplyMarkup"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1841,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to edit only the reply markup of inline messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "inline_message_id",
                "doc": "Identifier of the inline message"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#editmessagereplymarkup"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "editMessageReplyMarkupInline",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "inline_message_id",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "editMessageReplyMarkup",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "editMessageReplyMarkup"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1866,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to stop a poll which was sent by the bot. On success, the stopped Poll is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "message_id",
                "doc": "Identifier of the original message with the poll"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#stoppoll"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "stopPoll",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "message_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "stopPoll",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "stopPoll"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1891,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to delete a message, including service messages, with the following limitations:\n- A message can only be deleted if it was sent less than 48 hours ago.\n- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.\n- Bots can delete outgoing messages in private chats, groups, and supergroups.\n- Bots can delete incoming messages in private chats.\n- Bots granted can_post_messages permissions can delete outgoing messages in channels.\n- If the bot is an administrator of a group, it can delete any message there.\n- If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there.\nReturns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "message_id",
                "doc": "Identifier of the message to delete"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#deletemessage"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "deleteMessage",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "message_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1917,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send static .WEBP, animated .TGS, or video .WEBM stickers. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "sticker",
                "doc": "Sticker to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP sticker from the Internet, or upload a new .WEBP or .TGS sticker using multipart/form-data. Video stickers can only be sent by a file_id. Animated stickers can't be sent via an HTTP URL."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendsticker"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sendSticker",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "sticker",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "InputFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InputFile"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "sendSticker",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendSticker"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "sticker",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "sticker"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1935,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get a sticker set. On success, a StickerSet object is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "name",
                "doc": "Name of the sticker set"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getstickerset"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getStickerSet",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1952,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get information about custom emoji stickers by their identifiers. Returns an Array of Sticker objects.\n",
            "tags": [
              {
                "kind": "param",
                "name": "custom_emoji_ids",
                "doc": "List of custom emoji identifiers"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getcustomemojistickers"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getCustomEmojiStickers",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "custom_emoji_ids",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1964,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to upload a file with a sticker for later use in the createNewStickerSet and addStickerToSet methods (the file can be used multiple times). Returns the uploaded File on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "user_id",
                "doc": "User identifier of sticker file owner"
              },
              {
                "kind": "param",
                "name": "sticker_format",
                "doc": "Format of the sticker, must be one of “static”, “animated”, “video”"
              },
              {
                "kind": "param",
                "name": "sticker",
                "doc": "A file with the sticker in .WEBP, .PNG, .TGS, or .WEBM format. See https://core.telegram.org/stickers for technical requirements."
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#uploadstickerfile"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "uploadStickerFile",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "sticker_format",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "static",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "static"
                      }
                    },
                    {
                      "repr": "animated",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "animated"
                      }
                    },
                    {
                      "repr": "video",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "video"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "sticker",
                "optional": false,
                "tsType": {
                  "repr": "InputFile",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "InputFile"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 1978,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "user_id",
                "doc": "User identifier of created sticker set owner"
              },
              {
                "kind": "param",
                "name": "name",
                "doc": "Short name of sticker set, to be used in t.me/addstickers/ URLs (e.g., animals). Can contain only English letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in `_by_<bot_username>`. `<bot_username>` is case insensitive. 1-64 characters."
              },
              {
                "kind": "param",
                "name": "title",
                "doc": "Sticker set title, 1-64 characters"
              },
              {
                "kind": "param",
                "name": "stickers",
                "doc": "A list of 1-50 initial stickers to be added to the sticker set"
              },
              {
                "kind": "param",
                "name": "sticker_format",
                "doc": "Format of the sticker, must be one of “static”, “animated”, “video”"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#createnewstickerset"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "createNewStickerSet",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "title",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "stickers",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "InputSticker",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "InputSticker"
                    }
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "sticker_format",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "static",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "static"
                      }
                    },
                    {
                      "repr": "animated",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "animated"
                      }
                    },
                    {
                      "repr": "video",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "video"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "createNewStickerSet",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "createNewStickerSet"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "user_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "user_id"
                            }
                          },
                          {
                            "repr": "name",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "name"
                            }
                          },
                          {
                            "repr": "title",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "title"
                            }
                          },
                          {
                            "repr": "sticker_format",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "sticker_format"
                            }
                          },
                          {
                            "repr": "stickers",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "stickers"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2003,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to add a new sticker to a set created by the bot. The format of the added sticker must match the format of the other stickers in the set. Emoji sticker sets can have up to 200 stickers. Animated and video sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "user_id",
                "doc": "User identifier of sticker set owner"
              },
              {
                "kind": "param",
                "name": "name",
                "doc": "Sticker set name"
              },
              {
                "kind": "param",
                "name": "sticker",
                "doc": "An object with information about the added sticker. If exactly the same sticker had already been added to the set, then the set isn't changed."
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#addstickertoset"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "addStickerToSet",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "sticker",
                "optional": false,
                "tsType": {
                  "repr": "InputSticker",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "InputSticker"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2036,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to move a sticker in a set created by the bot to a specific position. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "sticker",
                "doc": "File identifier of the sticker"
              },
              {
                "kind": "param",
                "name": "position",
                "doc": "New sticker position in the set, zero-based"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setstickerpositioninset"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setStickerPositionInSet",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "sticker",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "position",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2057,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to delete a sticker from a set created by the bot. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "sticker",
                "doc": "File identifier of the sticker"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#deletestickerfromset"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "deleteStickerFromSet",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "sticker",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2073,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "sticker",
                "doc": "File identifier of the sticker"
              },
              {
                "kind": "param",
                "name": "emoji_list",
                "doc": "A list of 1-20 emoji associated with the sticker"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setstickeremojilist"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setStickerEmojiList",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "sticker",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "emoji_list",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2086,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "sticker",
                "doc": "File identifier of the sticker"
              },
              {
                "kind": "param",
                "name": "keywords",
                "doc": "A list of 0-20 search keywords for the sticker with total length of up to 64 characters"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setstickerkeywords"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setStickerKeywords",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "sticker",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "keywords",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2103,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to change the mask position of a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "sticker",
                "doc": "File identifier of the sticker"
              },
              {
                "kind": "param",
                "name": "mask_position",
                "doc": "An object with the position where the mask should be placed on faces. Omit the parameter to remove the mask position."
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setstickermaskposition"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setStickerMaskPosition",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "sticker",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "mask_position",
                "optional": true,
                "tsType": {
                  "repr": "MaskPosition",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "MaskPosition"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2120,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to set the title of a created sticker set. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "name",
                "doc": "Sticker set name"
              },
              {
                "kind": "param",
                "name": "title",
                "doc": "Sticker set title, 1-64 characters"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setstickersettitle"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setStickerSetTitle",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "title",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2140,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to delete a sticker set that was created by the bot. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "name",
                "doc": "Sticker set name"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#deletestickerset"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "deleteStickerSet",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2152,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail file must match the format of the stickers in the set. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "name",
                "doc": "Sticker set name"
              },
              {
                "kind": "param",
                "name": "user_id",
                "doc": "User identifier of the sticker set owner"
              },
              {
                "kind": "param",
                "name": "thumbnail",
                "doc": "A .WEBP or .PNG image with the thumbnail, must be up to 128 kilobytes in size and have a width and height of exactly 100px, or a .TGS animation with a thumbnail up to 32 kilobytes in size (see https://core.telegram.org/stickers#animated-sticker-requirements for animated sticker technical requirements), or a WEBM video with the thumbnail up to 32 kilobytes in size; see https://core.telegram.org/stickers#video-sticker-requirements for video sticker technical requirements. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files ». Animated and video sticker set thumbnails can't be uploaded via HTTP URL. If omitted, then the thumbnail is dropped and the first sticker is used as the thumbnail."
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setstickersetthumbnail"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setStickerSetThumbnail",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "thumbnail",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "InputFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InputFile"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2166,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to set the thumbnail of a custom emoji sticker set. Returns True on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "name",
                "doc": "Sticker set name"
              },
              {
                "kind": "param",
                "name": "custom_emoji_id",
                "doc": "Custom emoji identifier of a sticker from the sticker set; pass an empty string to drop the thumbnail and use the first sticker as the thumbnail."
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setcustomemojistickersetthumbnail"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setCustomEmojiStickerSetThumbnail",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "custom_emoji_id",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2187,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send answers to an inline query. On success, True is returned.\nNo more than 50 results per query are allowed.\n\nExample: An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an OAuth link. Once done, the bot can offer a switch_inline button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.\n",
            "tags": [
              {
                "kind": "param",
                "name": "inline_query_id",
                "doc": "Unique identifier for the answered query"
              },
              {
                "kind": "param",
                "name": "results",
                "doc": "An array of results for the inline query"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#answerinlinequery"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "answerInlineQuery",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "inline_query_id",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "results",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "readonly",
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "InlineQueryResult",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "InlineQueryResult"
                        }
                      }
                    }
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "answerInlineQuery",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "answerInlineQuery"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "inline_query_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_query_id"
                            }
                          },
                          {
                            "repr": "results",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "results"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2211,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to set the result of an interaction with a Web App and send a corresponding message on behalf of the user to the chat from which the query originated. On success, a SentWebAppMessage object is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "web_app_query_id",
                "doc": "Unique identifier for the query to be answered"
              },
              {
                "kind": "param",
                "name": "result",
                "doc": "An object describing the message to be sent"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#answerwebappquery"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "answerWebAppQuery",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "web_app_query_id",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "result",
                "optional": false,
                "tsType": {
                  "repr": "InlineQueryResult",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "InlineQueryResult"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2232,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send invoices. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat or username of the target channel (in the format @channelusername)"
              },
              {
                "kind": "param",
                "name": "title",
                "doc": "Product name, 1-32 characters"
              },
              {
                "kind": "param",
                "name": "description",
                "doc": "Product description, 1-255 characters"
              },
              {
                "kind": "param",
                "name": "payload",
                "doc": "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes."
              },
              {
                "kind": "param",
                "name": "provider_token",
                "doc": "Payment provider token, obtained via @BotFather"
              },
              {
                "kind": "param",
                "name": "currency",
                "doc": "Three-letter ISO 4217 currency code, see more on currencies"
              },
              {
                "kind": "param",
                "name": "prices",
                "doc": "Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendinvoice"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sendInvoice",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "title",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "description",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "payload",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "provider_token",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "currency",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "prices",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "readonly",
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "LabeledPrice",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "LabeledPrice"
                        }
                      }
                    }
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "sendInvoice",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendInvoice"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "title",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "title"
                            }
                          },
                          {
                            "repr": "description",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "description"
                            }
                          },
                          {
                            "repr": "payload",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "payload"
                            }
                          },
                          {
                            "repr": "provider_token",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "provider_token"
                            }
                          },
                          {
                            "repr": "currency",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "currency"
                            }
                          },
                          {
                            "repr": "prices",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "prices"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2255,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to create a link for an invoice. Returns the created invoice link as String on success.\n",
            "tags": [
              {
                "kind": "param",
                "name": "title",
                "doc": "Product name, 1-32 characters"
              },
              {
                "kind": "param",
                "name": "description",
                "doc": "Product description, 1-255 characters"
              },
              {
                "kind": "param",
                "name": "payload",
                "doc": "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes."
              },
              {
                "kind": "param",
                "name": "provider_token",
                "doc": "Payment provider token, obtained via BotFather"
              },
              {
                "kind": "param",
                "name": "currency",
                "doc": "Three-letter ISO 4217 currency code, see more on currencies"
              },
              {
                "kind": "param",
                "name": "prices",
                "doc": "Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#createinvoicelink"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "createInvoiceLink",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "title",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "description",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "payload",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "provider_token",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "currency",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "prices",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "LabeledPrice",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "LabeledPrice"
                    }
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "createInvoiceLink",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "createInvoiceLink"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "title",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "title"
                            }
                          },
                          {
                            "repr": "description",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "description"
                            }
                          },
                          {
                            "repr": "payload",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "payload"
                            }
                          },
                          {
                            "repr": "provider_token",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "provider_token"
                            }
                          },
                          {
                            "repr": "currency",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "currency"
                            }
                          },
                          {
                            "repr": "prices",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "prices"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2302,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Bot API will send an Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, True is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "shipping_query_id",
                "doc": "Unique identifier for the query to be answered"
              },
              {
                "kind": "param",
                "name": "ok",
                "doc": "Pass True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#answershippingquery"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "answerShippingQuery",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "shipping_query_id",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "ok",
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "answerShippingQuery",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "answerShippingQuery"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "shipping_query_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "shipping_query_id"
                            }
                          },
                          {
                            "repr": "ok",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "ok"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2342,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field pre_checkout_query. Use this method to respond to such pre-checkout queries. On success, True is returned. Note: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.\n",
            "tags": [
              {
                "kind": "param",
                "name": "pre_checkout_query_id",
                "doc": "Unique identifier for the query to be answered"
              },
              {
                "kind": "param",
                "name": "ok",
                "doc": "Specify True if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use False if there are any problems."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#answerprecheckoutquery"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "answerPreCheckoutQuery",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "pre_checkout_query_id",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "ok",
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "answerPreCheckoutQuery",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "answerPreCheckoutQuery"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "pre_checkout_query_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "pre_checkout_query_id"
                            }
                          },
                          {
                            "repr": "ok",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "ok"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2364,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success.\n\nUse this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.\n",
            "tags": [
              {
                "kind": "param",
                "name": "user_id",
                "doc": "User identifier"
              },
              {
                "kind": "param",
                "name": "errors",
                "doc": "An array describing the errors"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setpassportdataerrors"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setPassportDataErrors",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "errors",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "readonly",
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "PassportElementError",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "PassportElementError"
                        }
                      }
                    }
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2391,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to send a game. On success, the sent Message is returned.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat"
              },
              {
                "kind": "param",
                "name": "game_short_name",
                "doc": "Short name of the game, serves as the unique identifier for the game. Set up your games via BotFather."
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#sendgame"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sendGame",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "game_short_name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "sendGame",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "sendGame"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "game_short_name",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "game_short_name"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2409,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to set the score of the specified user in a game message. On success, if the message is not an inline message, the Message is returned, otherwise True is returned. Returns an error, if the new score is not greater than the user's current score in the chat and force is False.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat"
              },
              {
                "kind": "param",
                "name": "message_id",
                "doc": "Identifier of the sent message"
              },
              {
                "kind": "param",
                "name": "user_id",
                "doc": "User identifier"
              },
              {
                "kind": "param",
                "name": "score",
                "doc": "New score, must be non-negative"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setgamescore"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setGameScore",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "message_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "score",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "setGameScore",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "setGameScore"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          },
                          {
                            "repr": "user_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "user_id"
                            }
                          },
                          {
                            "repr": "score",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "score"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2433,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to set the score of the specified user in a game message. On success, if the message is not an inline message, the Message is returned, otherwise True is returned. Returns an error, if the new score is not greater than the user's current score in the chat and force is False.\n",
            "tags": [
              {
                "kind": "param",
                "name": "inline_message_id",
                "doc": "Identifier of the inline message"
              },
              {
                "kind": "param",
                "name": "user_id",
                "doc": "User identifier"
              },
              {
                "kind": "param",
                "name": "score",
                "doc": "New score, must be non-negative"
              },
              {
                "kind": "param",
                "name": "other",
                "doc": "Optional remaining parameters, confer the official reference below"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#setgamescore"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "setGameScoreInline",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "inline_message_id",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "score",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "other",
                "optional": true,
                "tsType": {
                  "repr": "Other",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "R",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "R"
                        }
                      },
                      {
                        "repr": "setGameScore",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "setGameScore"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "chat_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "chat_id"
                            }
                          },
                          {
                            "repr": "message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "message_id"
                            }
                          },
                          {
                            "repr": "inline_message_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "inline_message_id"
                            }
                          },
                          {
                            "repr": "user_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "user_id"
                            }
                          },
                          {
                            "repr": "score",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "score"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Other"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2462,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. Returns an Array of GameHighScore objects.\n\nThis method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.\n",
            "tags": [
              {
                "kind": "param",
                "name": "chat_id",
                "doc": "Unique identifier for the target chat"
              },
              {
                "kind": "param",
                "name": "message_id",
                "doc": "Identifier of the sent message"
              },
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Target user id"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getgamehighscores"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getGameHighScores",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chat_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "message_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2491,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in an inline game. On success, returns an Array of GameHighScore objects.\n\nThis method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.\n",
            "tags": [
              {
                "kind": "param",
                "name": "inline_message_id",
                "doc": "Identifier of the inline message"
              },
              {
                "kind": "param",
                "name": "user_id",
                "doc": "Target user id"
              },
              {
                "kind": "param",
                "name": "signal",
                "doc": "Optional `AbortSignal` to cancel the request\n\n**Official reference:** https://core.telegram.org/bots/api#getgamehighscores"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getGameHighScoresInline",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "inline_message_id",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "user_id",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "signal",
                "optional": true,
                "tsType": {
                  "repr": "AbortSignal",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AbortSignal"
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/api.ts",
            "line": 2514,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [
        {
          "name": "R",
          "constraint": {
            "repr": "RawApi",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RawApi"
            }
          },
          "default": {
            "repr": "RawApi",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RawApi"
            }
          }
        }
      ],
      "superTypeParams": []
    }
  },
  {
    "kind": "typeAlias",
    "name": "ApiCallFn",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/core/client.ts",
      "line": 53,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Type of a function that can perform an API call. Used for Transformers."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "",
        "kind": "fnOrConstructor",
        "fnOrConstructor": {
          "constructor": false,
          "tsType": {
            "repr": "Promise",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "ApiResponse",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "ApiCallResult",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "M",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "M"
                              }
                            },
                            {
                              "repr": "R",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "R"
                              }
                            }
                          ],
                          "typeName": "ApiCallResult"
                        }
                      }
                    ],
                    "typeName": "ApiResponse"
                  }
                }
              ],
              "typeName": "Promise"
            }
          },
          "params": [
            {
              "kind": "identifier",
              "name": "method",
              "optional": false,
              "tsType": {
                "repr": "M",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "M"
                }
              }
            },
            {
              "kind": "identifier",
              "name": "payload",
              "optional": false,
              "tsType": {
                "repr": "Payload",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "M",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "M"
                      }
                    },
                    {
                      "repr": "R",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "R"
                      }
                    }
                  ],
                  "typeName": "Payload"
                }
              }
            },
            {
              "kind": "identifier",
              "name": "signal",
              "optional": true,
              "tsType": {
                "repr": "AbortSignal",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "AbortSignal"
                }
              }
            }
          ],
          "typeParams": [
            {
              "name": "M",
              "constraint": {
                "repr": "Methods",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "R",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "R"
                      }
                    }
                  ],
                  "typeName": "Methods"
                }
              }
            }
          ]
        }
      },
      "typeParams": [
        {
          "name": "R",
          "constraint": {
            "repr": "RawApi",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RawApi"
            }
          },
          "default": {
            "repr": "RawApi",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RawApi"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "interface",
    "name": "ApiClientOptions",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/core/client.ts",
      "line": 112,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Options to pass to the API client that eventually connects to the Telegram\nBot API server and makes the HTTP requests."
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "apiRoot",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/client.ts",
            "line": 117,
            "col": 2
          },
          "jsDoc": {
            "doc": "Root URL of the Telegram Bot API server. Default:\nhttps://api.telegram.org"
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "typeParams": []
        },
        {
          "name": "buildUrl",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/client.ts",
            "line": 127,
            "col": 2
          },
          "jsDoc": {
            "doc": "URL builder function for API calls. Can be used to modify which API\nserver should be called.\n",
            "tags": [
              {
                "kind": "param",
                "name": "root",
                "doc": "The URL that was passed in `apiRoot`, or its default value"
              },
              {
                "kind": "param",
                "name": "token",
                "doc": "The bot's token that was passed when creating the bot"
              },
              {
                "kind": "param",
                "name": "method",
                "doc": "The API method to be called, e.g. `getMe`"
              },
              {
                "kind": "return",
                "doc": "The URL that will be fetched during the API call"
              }
            ]
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "URL",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "URL"
                    }
                  }
                ]
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "root",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "token",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "method",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "typeParams": []
            }
          },
          "typeParams": []
        },
        {
          "name": "timeoutSeconds",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/client.ts",
            "line": 146,
            "col": 2
          },
          "jsDoc": {
            "doc": "Maximum number of seconds that a request to the Bot API server may take.\nIf a request has not completed before this time has elapsed, grammY\naborts the request and errors. Without such a timeout, networking issues\nmay cause your bot to leave open a connection indefinitely, which may\neffectively make your bot freeze.\n\nYou probably do not have to care about this option. In rare cases, you\nmay want to adjust it if you are transferring large files via slow\nconnections to your own Bot API server.\n\nThe default number of seconds is `500`, which corresponds to 8 minutes\nand 20 seconds. Note that this is also the value that is hard-coded in\nthe official Bot API server, so you cannot perform any successful\nrequests that exceed this time frame (even if you would allow it in\ngrammY). Setting this option to higher than the default only makes sense\nwith a custom Bot API server."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "typeParams": []
        },
        {
          "name": "canUseWebhookReply",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/client.ts",
            "line": 179,
            "col": 2
          },
          "jsDoc": {
            "doc": "If the bot is running on webhooks, as soon as the bot receives an update\nfrom Telegram, it is possible to make up to one API call in the response\nto the webhook request. As a benefit, this saves your bot from making up\nto one HTTP request per update. However, there are a number of drawbacks\nto using this:\n1) You will not be able to handle potential errors of the respective API\n   call. This includes rate limiting errors, so sent messages can be\n   swallowed by the Bot API server and there is no way to detect if a\n   message was actually sent or not.\n2) More importantly, you also won't have access to the response object,\n   so e.g. calling `sendMessage` will not give you access to the message\n   you sent.\n3) Furthermore, it is not possible to cancel the request. The\n   `AbortSignal` will be disregarded.\n4) Note also that the types in grammY do not reflect the consequences of\n   a performed webhook callback! For instance, they indicate that you\n   always receive a response object, so it is your own responsibility to\n   make sure you're not screwing up while using this minor performance\n   optimization.\n\nWith this warning out of the way, here is what you can do with the\n`canUseWebhookReply` option: it can be used to pass a function that\ndetermines whether to use webhook reply for the given method. It will\nonly be invoked if the payload can be sent as JSON. It will not be\ninvoked again for a given update after it returned `true`, indicating\nthat the API call should be performed as a webhook send. In other words,\nsubsequent API calls (during the same update) will always perform their\nown HTTP requests.\n",
            "tags": [
              {
                "kind": "param",
                "name": "method",
                "doc": "The method to call"
              }
            ]
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "boolean",
                "kind": "keyword",
                "keyword": "boolean"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "method",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "typeParams": []
            }
          },
          "typeParams": []
        },
        {
          "name": "baseFetchConfig",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/client.ts",
            "line": 185,
            "col": 2
          },
          "jsDoc": {
            "doc": "Base configuration for `fetch` calls. Specify any additional parameters\nto use when fetching a method of the Telegram Bot API. Default: `{\ncompress: true }` (Node), `{}` (Deno)"
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "Omit",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "NonNullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "Parameters",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "fetch",
                                  "kind": "typeQuery",
                                  "typeQuery": "fetch"
                                }
                              ],
                              "typeName": "Parameters"
                            }
                          },
                          "indexType": {
                            "repr": "1",
                            "kind": "literal",
                            "literal": {
                              "kind": "number",
                              "number": 1.0
                            }
                          }
                        }
                      }
                    ],
                    "typeName": "NonNullable"
                  }
                },
                {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "method",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "method"
                      }
                    },
                    {
                      "repr": "headers",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "headers"
                      }
                    },
                    {
                      "repr": "body",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "body"
                      }
                    }
                  ]
                }
              ],
              "typeName": "Omit"
            }
          },
          "typeParams": []
        },
        {
          "name": "sensitiveLogs",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/client.ts",
            "line": 200,
            "col": 2
          },
          "jsDoc": {
            "doc": "When the network connection is unreliable and some API requests fail\nbecause of that, grammY will throw errors that tell you exactly which\nrequests failed. However, the error messages do not disclose the fetched\nURL as it contains your bot's token. Logging it may lead to token leaks.\n\nIf you are sure that no logs are ever posted in Telegram chats, GitHub\nissues, or otherwise shared, you can set this option to `true` in order\nto obtain more detailed logs that may help you debug your bot. The\ndefault value is `false`, meaning that the bot token is not logged."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "typeAlias",
    "name": "RawApi",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/core/client.ts",
      "line": 25,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Represents the raw Telegram Bot API with all methods specified 1:1 as\ndocumented on the website (https://core.telegram.org/bots/api).\n\nEvery method takes an optional `AbortSignal` object that allows to cancel the\nAPI call if desired."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "",
        "kind": "mapped",
        "mappedType": {
          "typeParam": {
            "name": "M",
            "constraint": {
              "repr": "",
              "kind": "typeOperator",
              "typeOperator": {
                "operator": "keyof",
                "tsType": {
                  "repr": "Telegram",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Telegram"
                  }
                }
              }
            }
          },
          "tsType": {
            "repr": "",
            "kind": "conditional",
            "conditionalType": {
              "checkType": {
                "repr": "",
                "kind": "indexedAccess",
                "indexedAccess": {
                  "readonly": false,
                  "objType": {
                    "repr": "Parameters",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "Telegram",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Telegram"
                              }
                            },
                            "indexType": {
                              "repr": "M",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "M"
                              }
                            }
                          }
                        }
                      ],
                      "typeName": "Parameters"
                    }
                  },
                  "indexType": {
                    "repr": "0",
                    "kind": "literal",
                    "literal": {
                      "kind": "number",
                      "number": 0.0
                    }
                  }
                }
              },
              "extendsType": {
                "repr": "undefined",
                "kind": "keyword",
                "keyword": "undefined"
              },
              "trueType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "ReturnType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "",
                                "kind": "indexedAccess",
                                "indexedAccess": {
                                  "readonly": false,
                                  "objType": {
                                    "repr": "Telegram",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "Telegram"
                                    }
                                  },
                                  "indexType": {
                                    "repr": "M",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "M"
                                    }
                                  }
                                }
                              }
                            ],
                            "typeName": "ReturnType"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "signal",
                      "optional": true,
                      "tsType": {
                        "repr": "AbortSignal",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "AbortSignal"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "falseType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "ReturnType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "",
                                "kind": "indexedAccess",
                                "indexedAccess": {
                                  "readonly": false,
                                  "objType": {
                                    "repr": "Telegram",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "Telegram"
                                    }
                                  },
                                  "indexType": {
                                    "repr": "M",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "M"
                                    }
                                  }
                                }
                              }
                            ],
                            "typeName": "ReturnType"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "args",
                      "optional": false,
                      "tsType": {
                        "repr": "Opts",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "M",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "M"
                              }
                            }
                          ],
                          "typeName": "Opts"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "signal",
                      "optional": true,
                      "tsType": {
                        "repr": "AbortSignal",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "AbortSignal"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              }
            }
          }
        }
      },
      "typeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "TransformableApi",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/core/client.ts",
      "line": 83,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "A transformable API enhances the `RawApi` type by transformers."
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "raw",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/client.ts",
            "line": 87,
            "col": 2
          },
          "jsDoc": {
            "doc": "Access to the raw API that the transformers will be installed on."
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "R",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "R"
            }
          },
          "typeParams": []
        },
        {
          "name": "use",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/client.ts",
            "line": 91,
            "col": 2
          },
          "jsDoc": {
            "doc": "Can be used to register any number of transformers on the API."
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "this",
                "kind": "this",
                "this": true
              },
              "params": [
                {
                  "kind": "rest",
                  "arg": {
                    "kind": "identifier",
                    "name": "transformers",
                    "optional": false,
                    "tsType": null
                  },
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "Transformer",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "R",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "R"
                            }
                          }
                        ],
                        "typeName": "Transformer"
                      }
                    }
                  }
                }
              ],
              "typeParams": []
            }
          },
          "typeParams": []
        },
        {
          "name": "installedTransformers",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/client.ts",
            "line": 97,
            "col": 2
          },
          "jsDoc": {
            "doc": "Returns a readonly list or the currently installed transformers. The list\nis sorted by time of installation where index 0 represents the\ntransformer that was installed first."
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "",
            "kind": "array",
            "array": {
              "repr": "Transformer",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "R",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "R"
                    }
                  }
                ],
                "typeName": "Transformer"
              }
            }
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": [
        {
          "name": "R",
          "constraint": {
            "repr": "RawApi",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RawApi"
            }
          },
          "default": {
            "repr": "RawApi",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RawApi"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "typeAlias",
    "name": "Transformer",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/core/client.ts",
      "line": 71,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "API call transformers are functions that can access and modify the method and\npayload of an API call on the fly. This can be useful if you want to\nimplement rate limiting or other things against the Telegram Bot API.\n\nConfer the grammY\n[documentation](https://grammy.dev/advanced/transformers.html) to read more\nabout how to use transformers."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "",
        "kind": "fnOrConstructor",
        "fnOrConstructor": {
          "constructor": false,
          "tsType": {
            "repr": "Promise",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "ApiResponse",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "ApiCallResult",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "M",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "M"
                              }
                            },
                            {
                              "repr": "R",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "R"
                              }
                            }
                          ],
                          "typeName": "ApiCallResult"
                        }
                      }
                    ],
                    "typeName": "ApiResponse"
                  }
                }
              ],
              "typeName": "Promise"
            }
          },
          "params": [
            {
              "kind": "identifier",
              "name": "prev",
              "optional": false,
              "tsType": {
                "repr": "ApiCallFn",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "R",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "R"
                      }
                    }
                  ],
                  "typeName": "ApiCallFn"
                }
              }
            },
            {
              "kind": "identifier",
              "name": "method",
              "optional": false,
              "tsType": {
                "repr": "M",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "M"
                }
              }
            },
            {
              "kind": "identifier",
              "name": "payload",
              "optional": false,
              "tsType": {
                "repr": "Payload",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "M",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "M"
                      }
                    },
                    {
                      "repr": "R",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "R"
                      }
                    }
                  ],
                  "typeName": "Payload"
                }
              }
            },
            {
              "kind": "identifier",
              "name": "signal",
              "optional": true,
              "tsType": {
                "repr": "AbortSignal",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "AbortSignal"
                }
              }
            }
          ],
          "typeParams": [
            {
              "name": "M",
              "constraint": {
                "repr": "Methods",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "R",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "R"
                      }
                    }
                  ],
                  "typeName": "Methods"
                }
              }
            }
          ]
        }
      },
      "typeParams": [
        {
          "name": "R",
          "constraint": {
            "repr": "RawApi",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RawApi"
            }
          },
          "default": {
            "repr": "RawApi",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RawApi"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "interface",
    "name": "WebhookReplyEnvelope",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/core/client.ts",
      "line": 46,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Small utility interface that abstracts from webhook reply calls of different\nweb frameworks."
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "send",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/client.ts",
            "line": 47,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  }
                ]
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "payload",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "typeParams": []
            }
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "class",
    "name": "GrammyError",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/core/error.ts",
      "line": 14,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "This class represents errors that are thrown by grammY because the Telegram\nBot API responded with an error.\n\nInstances of this class hold the information that the Telegram backend\nreturned.\n\nIf this error is thrown, grammY could successfully communicate with the\nTelegram Bot API servers, however, an error code was returned for the\nrespective method call."
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "hasBody": true,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "message",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "err",
              "optional": false,
              "tsType": {
                "repr": "ApiError",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ApiError"
                }
              }
            },
            {
              "accessibility": "public",
              "kind": "identifier",
              "name": "method",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "readonly": true
            },
            {
              "accessibility": "public",
              "kind": "identifier",
              "name": "payload",
              "optional": false,
              "tsType": {
                "repr": "Record",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "unknown",
                      "kind": "keyword",
                      "keyword": "unknown"
                    }
                  ],
                  "typeName": "Record"
                }
              },
              "readonly": true
            }
          ],
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/error.ts",
            "line": 23,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": {
            "doc": "Flag that this request was unsuccessful. Always `false`."
          },
          "tsType": {
            "repr": "false",
            "kind": "literal",
            "literal": {
              "kind": "boolean",
              "boolean": false
            }
          },
          "readonly": true,
          "accessibility": "public",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "ok",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/error.ts",
            "line": 16,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "An integer holding Telegram's error code. Subject to change."
          },
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": "public",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "error_code",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/error.ts",
            "line": 18,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "A human-readable description of the error."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": "public",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "description",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/error.ts",
            "line": 20,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Further parameters that may help to automatically handle the error."
          },
          "tsType": {
            "repr": "ResponseParameters",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "ResponseParameters"
            }
          },
          "readonly": true,
          "accessibility": "public",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "parameters",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/error.ts",
            "line": 22,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "Error",
      "implements": [
        {
          "repr": "ApiError",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "ApiError"
          }
        }
      ],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "HttpError",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/core/error.ts",
      "line": 64,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "This class represents errors that are thrown by grammY because an HTTP call\nto the Telegram Bot API failed.\n\nInstances of this class hold the error object that was created because the\nfetch call failed. It can be inspected to determine why exactly the network\nrequest failed.\n\nIf an [API transformer\nfunction](https://grammy.dev/advanced/transformers.html) throws an error,\ngrammY will regard this as if the network request failed. The contained error\nwill then be the error that was thrown by the transformer function."
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "accessibility": null,
          "hasBody": true,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "message",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "accessibility": "public",
              "kind": "identifier",
              "name": "error",
              "optional": false,
              "tsType": {
                "repr": "unknown",
                "kind": "keyword",
                "keyword": "unknown"
              },
              "readonly": true
            }
          ],
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/core/error.ts",
            "line": 65,
            "col": 2
          }
        }
      ],
      "properties": [],
      "indexSignatures": [],
      "methods": [],
      "extends": "Error",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "API_CONSTANTS",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/constants.ts",
      "line": 24,
      "col": 13
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Contains lists of constants which are useful when working with the Bot API."
    },
    "variableDef": {
      "tsType": null,
      "kind": "const"
    }
  },
  {
    "kind": "variable",
    "name": "InlineQueryResultBuilder",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/inline_query.ts",
      "line": 157,
      "col": 13
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Holds a number of helper methods for building `InlineQueryResult*` objects.\n\nFor example, letting the user pick one out of three photos can be done like\nthis.\n\n```ts\nconst results = [\n    InlineQueryResultBuilder.photo('id0', 'https://grammy.dev/images/Y.png'),\n    InlineQueryResultBuilder.photo('id1', 'https://grammy.dev/images/Y.png'),\n    InlineQueryResultBuilder.photo('id2', 'https://grammy.dev/images/Y.png'),\n];\nawait ctx.answerInlineQuery(results)\n```\n\nIf you want the message content to be different from the content in the\ninline query result, you can perform another method call on the resulting\nobjects.\n\n```ts\nconst results = [\n    InlineQueryResultBuilder.photo(\"id0\", \"https://grammy.dev/images/Y.png\")\n        .text(\"Picked photo 0!\"),\n    InlineQueryResultBuilder.photo(\"id1\", \"https://grammy.dev/images/Y.png\")\n        .text(\"Picked photo 1!\"),\n    InlineQueryResultBuilder.photo(\"id2\", \"https://grammy.dev/images/Y.png\")\n        .text(\"Picked photo 2!\"),\n];\nawait ctx.answerInlineQuery(results)\n```\n\nBe sure to check the\n[documentation](https://core.telegram.org/bots/api#inline-mode) on inline\nmode."
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "article",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "title",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultArticle",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultArticle"
                            }
                          },
                          {
                            "repr": "title",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "title"
                            }
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "audio",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "title",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "audio_url",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultAudio",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultAudio"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "title",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "title"
                                }
                              },
                              {
                                "repr": "audio_url",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "audio_url"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "audioCached",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "audio_file_id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultCachedAudio",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultCachedAudio"
                            }
                          },
                          {
                            "repr": "audio_file_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "audio_file_id"
                            }
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "contact",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "phone_number",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "first_name",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultContact",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultContact"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "phone_number",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "phone_number"
                                }
                              },
                              {
                                "repr": "first_name",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "first_name"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "documentPdf",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "title",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "document_url",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultDocument",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultDocument"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "mime_type",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "mime_type"
                                }
                              },
                              {
                                "repr": "title",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "title"
                                }
                              },
                              {
                                "repr": "document_url",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "document_url"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "documentZip",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "title",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "document_url",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultDocument",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultDocument"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "mime_type",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "mime_type"
                                }
                              },
                              {
                                "repr": "title",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "title"
                                }
                              },
                              {
                                "repr": "document_url",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "document_url"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "documentCached",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "title",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "document_file_id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultCachedDocument",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultCachedDocument"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "title",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "title"
                                }
                              },
                              {
                                "repr": "document_file_id",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "document_file_id"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "game",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "game_short_name",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultGame",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultGame"
                            }
                          },
                          {
                            "repr": "game_short_name",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "game_short_name"
                            }
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "gif",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "gif_url",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "thumbnail_url",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultGif",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultGif"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "gif_url",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "gif_url"
                                }
                              },
                              {
                                "repr": "thumbnail_url",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "thumbnail_url"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "gifCached",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "gif_file_id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultCachedGif",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultCachedGif"
                            }
                          },
                          {
                            "repr": "gif_file_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "gif_file_id"
                            }
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "location",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "title",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "latitude",
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "longitude",
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultLocation",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultLocation"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "title",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "title"
                                }
                              },
                              {
                                "repr": "latitude",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "latitude"
                                }
                              },
                              {
                                "repr": "longitude",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "longitude"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "mpeg4gif",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "mpeg4_url",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "thumbnail_url",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultMpeg4Gif",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultMpeg4Gif"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "mpeg4_url",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "mpeg4_url"
                                }
                              },
                              {
                                "repr": "thumbnail_url",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "thumbnail_url"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "mpeg4gifCached",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "mpeg4_file_id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultCachedMpeg4Gif",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultCachedMpeg4Gif"
                            }
                          },
                          {
                            "repr": "mpeg4_file_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "mpeg4_file_id"
                            }
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "photo",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "photo_url",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultPhoto",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultPhoto"
                            }
                          },
                          {
                            "repr": "photo_url",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "photo_url"
                            }
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "photoCached",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "photo_file_id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultCachedPhoto",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultCachedPhoto"
                            }
                          },
                          {
                            "repr": "photo_file_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "photo_file_id"
                            }
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "stickerCached",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "sticker_file_id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultCachedSticker",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultCachedSticker"
                            }
                          },
                          {
                            "repr": "sticker_file_id",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "sticker_file_id"
                            }
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "venue",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "title",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "latitude",
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "longitude",
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "address",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultVenue",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultVenue"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "title",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "title"
                                }
                              },
                              {
                                "repr": "latitude",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "latitude"
                                }
                              },
                              {
                                "repr": "longitude",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "longitude"
                                }
                              },
                              {
                                "repr": "address",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "address"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "videoHtml",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "title",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "video_url",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "thumbnail_url",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultVideo",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultVideo"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "mime_type",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "mime_type"
                                }
                              },
                              {
                                "repr": "title",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "title"
                                }
                              },
                              {
                                "repr": "video_url",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "video_url"
                                }
                              },
                              {
                                "repr": "thumbnail_url",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "thumbnail_url"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "videoMp4",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "title",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "video_url",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "thumbnail_url",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultVideo",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultVideo"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "mime_type",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "mime_type"
                                }
                              },
                              {
                                "repr": "title",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "title"
                                }
                              },
                              {
                                "repr": "video_url",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "video_url"
                                }
                              },
                              {
                                "repr": "thumbnail_url",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "thumbnail_url"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "videoCached",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "title",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "video_file_id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultCachedVideo",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultCachedVideo"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "title",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "title"
                                }
                              },
                              {
                                "repr": "video_file_id",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "video_file_id"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "voice",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "title",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "voice_url",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultVoice",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultVoice"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "title",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "title"
                                }
                              },
                              {
                                "repr": "voice_url",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "voice_url"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            },
            {
              "name": "voiceCached",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "title",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "voice_file_id",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InlineQueryResultOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InlineQueryResultCachedVoice",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InlineQueryResultCachedVoice"
                            }
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "title",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "title"
                                }
                              },
                              {
                                "repr": "voice_file_id",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "voice_file_id"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "InlineQueryResultOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": null,
              "typeParams": []
            }
          ],
          "properties": [],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "const"
    }
  },
  {
    "kind": "variable",
    "name": "InputMediaBuilder",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/input_media.ts",
      "line": 39,
      "col": 13
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Holds a number of helper methods for building `InputMedia*` objects. They are\nuseful when sending media groups and when editing media messages.\n\nFor example, media groups can be sent like this.\n\n```ts\nconst paths = [\n    '/tmp/pic0.jpg',\n    '/tmp/pic1.jpg',\n    '/tmp/pic2.jpg',\n]\nconst files = paths.map((path) => new InputFile(path))\nconst media = files.map((file) => InputMediaBuilder.photo(file))\nawait bot.api.sendMediaGroup(chatId, media)\n```\n\nMedia can be edited like this.\n\n```ts\nconst file = new InputFile('/tmp/pic0.jpg')\nconst media = InputMediaBuilder.photo(file, {\n    caption: 'new caption'\n})\nawait bot.api.editMessageMedia(chatId, messageId, media)\n```"
    },
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [
            {
              "name": "photo",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "media",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "InputFile",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "InputFile"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InputMediaOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InputMediaPhoto",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InputMediaPhoto"
                            }
                          }
                        ],
                        "typeName": "InputMediaOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "InputMediaPhoto",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "InputMediaPhoto"
                }
              },
              "typeParams": []
            },
            {
              "name": "video",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "media",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "InputFile",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "InputFile"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InputMediaOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InputMediaVideo",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InputMediaVideo"
                            }
                          }
                        ],
                        "typeName": "InputMediaOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "InputMediaVideo",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "InputMediaVideo"
                }
              },
              "typeParams": []
            },
            {
              "name": "animation",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "media",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "InputFile",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "InputFile"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InputMediaOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InputMediaAnimation",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InputMediaAnimation"
                            }
                          }
                        ],
                        "typeName": "InputMediaOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "InputMediaAnimation",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "InputMediaAnimation"
                }
              },
              "typeParams": []
            },
            {
              "name": "audio",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "media",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "InputFile",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "InputFile"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InputMediaOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InputMediaAudio",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InputMediaAudio"
                            }
                          }
                        ],
                        "typeName": "InputMediaOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "InputMediaAudio",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "InputMediaAudio"
                }
              },
              "typeParams": []
            },
            {
              "name": "document",
              "kind": "method",
              "params": [
                {
                  "kind": "identifier",
                  "name": "media",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "InputFile",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "InputFile"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "InputMediaOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InputMediaDocument",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "InputMediaDocument"
                            }
                          }
                        ],
                        "typeName": "InputMediaOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "optional": false,
              "returnType": {
                "repr": "InputMediaDocument",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "InputMediaDocument"
                }
              },
              "typeParams": []
            }
          ],
          "properties": [],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "const"
    }
  },
  {
    "kind": "class",
    "name": "Keyboard",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
      "line": 52,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Use this class to simplify building a custom keyboard (something like this:\nhttps://core.telegram.org/bots/features#keyboards).\n\n```ts\n// Build a custom keyboard:\nconst keyboard = new Keyboard()\n  .text('A').text('B').row()\n  .text('C').text('D')\n\n// Now you can send it like so:\nawait ctx.reply('Here is your custom keyboard!', {\n  reply_markup: keyboard\n})\n```\n\nIf you already have some source data which you would like to turn into a\nkeyboard button object, you can use the static equivalents which every button\nhas. You can use them to create a two-dimensional keyboard button array. The\nresulting array can be turned into a keyboard instance.\n\n```ts\nconst button = Keyboard.text('push my buttons')\nconst array = [[button]]\nconst keyboard = Keyboard.from(array)\n```\n\nIf you want to create text buttons only, you can directly use a\ntwo-dimensional string array and turn it into a keyboard.\n\n```ts\nconst data = [['A', 'B'], ['C', 'D']]\nconst keyboard = Keyboard.from(data)\n```\n\nBe sure to check out the\n[documentation](https://grammy.dev/plugins/keyboard.html#custom-keyboards) on\ncustom keyboards in grammY."
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": {
            "doc": "Initialize a new `Keyboard` with an optional two-dimensional array of\n`KeyboardButton` objects. This is the nested array that holds the custom\nkeyboard. It will be extended every time you call one of the provided\nmethods.\n",
            "tags": [
              {
                "kind": "param",
                "name": "keyboard",
                "doc": "An optional initial two-dimensional button array"
              }
            ]
          },
          "accessibility": null,
          "hasBody": true,
          "name": "constructor",
          "params": [
            {
              "accessibility": "public",
              "kind": "assign",
              "left": {
                "kind": "identifier",
                "name": "keyboard",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "KeyboardButton",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "KeyboardButton"
                      }
                    }
                  }
                }
              },
              "right": "[UNSUPPORTED]",
              "tsType": null,
              "readonly": true
            }
          ],
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 86,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": {
            "doc": "Requests clients to always show the keyboard when the regular keyboard is\nhidden. Defaults to false, in which case the custom keyboard can be\nhidden and opened with a keyboard icon."
          },
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": false,
          "accessibility": "public",
          "optional": true,
          "isAbstract": false,
          "isStatic": false,
          "name": "is_persistent",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 58,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Show the current keyboard only to those users that are mentioned in the\ntext of the message object."
          },
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": false,
          "accessibility": "public",
          "optional": true,
          "isAbstract": false,
          "isStatic": false,
          "name": "selective",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 63,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Hide the keyboard after a button is pressed."
          },
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": false,
          "accessibility": "public",
          "optional": true,
          "isAbstract": false,
          "isStatic": false,
          "name": "one_time_keyboard",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 67,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Resize the current keyboard according to its buttons. Usually, this will\nmake the keyboard smaller."
          },
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": false,
          "accessibility": "public",
          "optional": true,
          "isAbstract": false,
          "isStatic": false,
          "name": "resize_keyboard",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 72,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Placeholder to be shown in the input field when the keyboard is active."
          },
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": "public",
          "optional": true,
          "isAbstract": false,
          "isStatic": false,
          "name": "input_field_placeholder",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 76,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": {
            "doc": "Allows you to add your own `KeyboardButton` objects if you already have\nthem for some reason. You most likely want to call one of the other\nmethods.\n",
            "tags": [
              {
                "kind": "param",
                "name": "buttons",
                "doc": "The buttons to add"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "add",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "buttons",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "KeyboardButton",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "KeyboardButton"
                    }
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 94,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Adds a 'line break'. Call this method to make sure that the next added\nbuttons will be on a new row.\n\nYou may pass a number of `KeyboardButton` objects if you already have the\ninstances for some reason. You most likely don't want to pass any\narguments to `row`.\n",
            "tags": [
              {
                "kind": "param",
                "name": "buttons",
                "doc": "A number of buttons to add to the next row"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "row",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "buttons",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "KeyboardButton",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "KeyboardButton"
                    }
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 108,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Adds a new text button. This button will simply send the given text as a\ntext message back to your bot if a user clicks on it.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "text",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 118,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new text button. This button will simply send the given text as\na text message back to your bot if a user clicks on it.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "text",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "KeyboardButton.CommonButton",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "KeyboardButton.CommonButton"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 127,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Adds a new request user button. When the user presses the button, a list\nof suitable users will be opened. Tapping on any user will send their\nidentifier to the bot in a “user_shared” service message. Available in\nprivate chats only.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "requestId",
                "doc": "A signed 32-bit identifier of the request"
              },
              {
                "kind": "param",
                "name": "options",
                "doc": "Options object for further requirements"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "requestUser",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "requestId",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "Omit",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "KeyboardButtonRequestUser",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "KeyboardButtonRequestUser"
                          }
                        },
                        {
                          "repr": "request_id",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "request_id"
                          }
                        }
                      ],
                      "typeName": "Omit"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 140,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new request user button. When the user presses the button, a\nlist of suitable users will be opened. Tapping on any user will send\ntheir identifier to the bot in a “user_shared” service message. Available\nin private chats only.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "requestId",
                "doc": "A signed 32-bit identifier of the request"
              },
              {
                "kind": "param",
                "name": "options",
                "doc": "Options object for further requirements"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "requestUser",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "requestId",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "Omit",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "KeyboardButtonRequestUser",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "KeyboardButtonRequestUser"
                          }
                        },
                        {
                          "repr": "request_id",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "request_id"
                          }
                        }
                      ],
                      "typeName": "Omit"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": {
              "repr": "KeyboardButton.RequestUserButton",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "KeyboardButton.RequestUserButton"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 157,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Adds a new request chat button. When the user presses the button, a list\nof suitable users will be opened. Tapping on a chat will send its\nidentifier to the bot in a “chat_shared” service message. Available in\nprivate chats only.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "requestId",
                "doc": "A signed 32-bit identifier of the request"
              },
              {
                "kind": "param",
                "name": "options",
                "doc": "Options object for further requirements"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "requestChat",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "requestId",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "Omit",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "KeyboardButtonRequestChat",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "KeyboardButtonRequestChat"
                          }
                        },
                        {
                          "repr": "request_id",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "request_id"
                          }
                        }
                      ],
                      "typeName": "Omit"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 174,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new request chat button. When the user presses the button, a\nlist of suitable users will be opened. Tapping on a chat will send its\nidentifier to the bot in a “chat_shared” service message. Available in\nprivate chats only.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "requestId",
                "doc": "A signed 32-bit identifier of the request"
              },
              {
                "kind": "param",
                "name": "options",
                "doc": "Options object for further requirements"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "requestChat",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "requestId",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "Omit",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "KeyboardButtonRequestChat",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "KeyboardButtonRequestChat"
                          }
                        },
                        {
                          "repr": "request_id",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "request_id"
                          }
                        }
                      ],
                      "typeName": "Omit"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": {
              "repr": "KeyboardButton.RequestChatButton",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "KeyboardButton.RequestChatButton"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 193,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Adds a new contact request button. The user's phone number will be sent\nas a contact when the button is pressed. Available in private chats only.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "requestContact",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 208,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new contact request button. The user's phone number will be\nsent as a contact when the button is pressed. Available in private chats\nonly.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "requestContact",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "KeyboardButton.RequestContactButton",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "KeyboardButton.RequestContactButton"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 218,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Adds a new location request button. The user's current location will be\nsent when the button is pressed. Available in private chats only.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "requestLocation",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 227,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new location request button. The user's current location will\nbe sent when the button is pressed. Available in private chats only.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "requestLocation",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "KeyboardButton.RequestLocationButton",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "KeyboardButton.RequestLocationButton"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 236,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Adds a new poll request button. The user will be asked to create a poll\nand send it to the bot when the button is pressed. Available in private\nchats only.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "type",
                "doc": "The type of permitted polls to create, omit if the user may\nsend a poll of any type"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "requestPoll",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "type",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "indexedAccess",
                  "indexedAccess": {
                    "readonly": false,
                    "objType": {
                      "repr": "KeyboardButtonPollType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "KeyboardButtonPollType"
                      }
                    },
                    "indexType": {
                      "repr": "type",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "type"
                      }
                    }
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 248,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new poll request button. The user will be asked to create a\npoll and send it to the bot when the button is pressed. Available in\nprivate chats only.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "type",
                "doc": "The type of permitted polls to create, omit if the user may\nsend a poll of any type"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "requestPoll",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "type",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "indexedAccess",
                  "indexedAccess": {
                    "readonly": false,
                    "objType": {
                      "repr": "KeyboardButtonPollType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "KeyboardButtonPollType"
                      }
                    },
                    "indexType": {
                      "repr": "type",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "type"
                      }
                    }
                  }
                }
              }
            ],
            "returnType": {
              "repr": "KeyboardButton.RequestPollButton",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "KeyboardButton.RequestPollButton"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 260,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Adds a new web app button. The Web App that will be launched when the\nuser presses the button. The Web App will be able to send a\n“web_app_data” service message. Available in private chats only.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "url",
                "doc": "An HTTPS URL of a Web App to be opened with additional data"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "webApp",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "url",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 274,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new web app button. The Web App that will be launched when the\nuser presses the button. The Web App will be able to send a\n“web_app_data” service message. Available in private chats only.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "url",
                "doc": "An HTTPS URL of a Web App to be opened with additional data"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "webApp",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "url",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "KeyboardButton.WebAppButton",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "KeyboardButton.WebAppButton"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 285,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Make the current keyboard persistent. See\nhttps://grammy.dev/plugins/keyboard.html#persistent-keyboards for more\ndetails.\n\nKeyboards are not persistent by default, use this function to enable it\n(without any parameters or pass `true`). Pass `false` to force the\nkeyboard to not persist.\n",
            "tags": [
              {
                "kind": "param",
                "name": "isEnabled",
                "doc": "`true` if the keyboard should persist, and `false` otherwise"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "persistent",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "isEnabled",
                  "optional": false,
                  "tsType": null
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 299,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Make the current keyboard selective. See\nhttps://grammy.dev/plugins/keyboard.html#selectively-send-custom-keyboards\nfor more details.\n\nKeyboards are non-selective by default, use this function to enable it\n(without any parameters or pass `true`). Pass `false` to force the\nkeyboard to be non-selective.\n",
            "tags": [
              {
                "kind": "param",
                "name": "isEnabled",
                "doc": "`true` if the keyboard should be selective, and `false` otherwise"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "selected",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "isEnabled",
                  "optional": false,
                  "tsType": null
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 314,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Make the current keyboard one-time. See\nhttps://grammy.dev/plugins/keyboard.html#one-time-custom-keyboards for\nmore details.\n\nKeyboards are non-one-time by default, use this function to enable it\n(without any parameters or pass `true`). Pass `false` to force the\nkeyboard to be non-one-time.\n",
            "tags": [
              {
                "kind": "param",
                "name": "isEnabled",
                "doc": "`true` if the keyboard should be one-time, and `false` otherwise"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "oneTime",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "isEnabled",
                  "optional": false,
                  "tsType": null
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 329,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Make the current keyboard resized. See\nhttps://grammy.dev/plugins/keyboard.html#resize-custom-keyboard for more\ndetails.\n\nKeyboards are non-resized by default, use this function to enable it\n(without any parameters or pass `true`). Pass `false` to force the\nkeyboard to be non-resized.\n",
            "tags": [
              {
                "kind": "param",
                "name": "isEnabled",
                "doc": "`true` if the keyboard should be resized, and `false` otherwise"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "resized",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "isEnabled",
                  "optional": false,
                  "tsType": null
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 344,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Set the current keyboard's input field placeholder. See\nhttps://grammy.dev/plugins/keyboard.html#input-field-placeholder for more\ndetails.\n",
            "tags": [
              {
                "kind": "param",
                "name": "value",
                "doc": "The placeholder text"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "placeholder",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 355,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new keyboard that contains the transposed grid of buttons of\nthis keyboard. This means that the resulting keyboard has the rows and\ncolumns flipped.\n\nNote that buttons can only span multiple columns, but never multiple\nrows. This means that if the given arrays have different lengths, some\nbuttons might flow up in the layout. In these cases, transposing a\nkeyboard a second time will not undo the first transposition.\n\nHere are some examples.\n\n```\noriginal    transposed\n[  a  ]  ~> [  a  ]\n\n            [  a  ]\n[a b c]  ~> [  b  ]\n            [  c  ]\n\n[ a b ]     [a c e]\n[ c d ]  ~> [ b d ]\n[  e  ]\n\n[ a b ]     [a c d]\n[  c  ]  ~> [ b e ]\n[d e f]     [  f  ]\n```"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "toTransposed",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 388,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new keyboard with the same buttons but reflowed into a given\nnumber of columns as if the buttons were text elements. Optionally, you\ncan specify if the flow should make sure to fill up the last row.\n\nThis method is idempotent, so calling it a second time will effectively\nclone this keyboard without reordering the buttons.\n\nHere are some examples.\n\n```\noriginal    flowed\n[  a  ]  ~> [  a  ]    (4 columns)\n\n            [  a  ]\n[a b c]  ~> [  b  ]    (1 column)\n            [  c  ]\n\n[ a b ]     [a b c]\n[ c d ]  ~> [ d e ]    (3 columns)\n[  e  ]\n\n[ a b ]     [abcde]\n[  c  ]  ~> [  f  ]    (5 columns)\n[d e f]\n\n[a b c]     [  a  ]\n[d e f]  ~> [b c d]    (3 colums, { fillLastRow: true })\n[g h i]     [e f g]\n[  j  ]     [h i j]\n```\n",
            "tags": [
              {
                "kind": "param",
                "name": "columns",
                "doc": "Maximum number of buttons per row"
              },
              {
                "kind": "param",
                "name": "options",
                "doc": "Optional flowing behavior"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "toFlowed",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "columns",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "FlowOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "FlowOptions"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 428,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates and returns a deep copy of this keyboard.\n\nOptionally takes a new grid of buttons to replace the current buttons. If\nspecified, only the options will be cloned, and the given buttons will be\nused instead."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "clone",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "keyboard",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "KeyboardButton",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "KeyboardButton"
                        }
                      }
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 440,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Appends the buttons of the given keyboards to this keyboard. If other\noptions are specified in these keyboards, they will be ignored.\n",
            "tags": [
              {
                "kind": "param",
                "name": "sources",
                "doc": "A number of keyboards to append"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "append",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "sources",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "KeyboardSource",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "KeyboardSource"
                    }
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 455,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Returns the keyboard that was build. Note that it doesn't return\n`resize_keyboard` or other options that may be set. You don't usually\nneed to call this method. It is no longer useful."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "build",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 467,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Turns a two-dimensional keyboard button array into a keyboard instance.\nYou can use the static button builder methods to create keyboard button\nobjects.\n",
            "tags": [
              {
                "kind": "param",
                "name": "source",
                "doc": "A two-dimensional button array"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "from",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "source",
                "optional": false,
                "tsType": {
                  "repr": "KeyboardSource",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "KeyboardSource"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Keyboard",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Keyboard"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 477,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "InlineKeyboard",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
      "line": 519,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Use this class to simplify building an inline keyboard (something like this:\nhttps://core.telegram.org/bots/features#inline-keyboards).\n\n```ts\n// Build an inline keyboard:\nconst keyboard = new InlineKeyboard()\n  .text('A').text('B', 'callback-data').row()\n  .text('C').text('D').row()\n  .url('Telegram', 'telegram.org')\n\n// Send the keyboard:\nawait ctx.reply('Here is your inline keyboard!', {\n  reply_markup: keyboard\n})\n```\n\nIf you already have some source data which you would like to turn into an\ninline button object, you can use the static equivalents which every inline\nbutton has. You can use them to create a two-dimensional inline button array.\nThe resulting array can be turned into a keyboard instance.\n\n```ts\nconst button = InlineKeyboard.text('GO', 'go')\nconst array = [[button]]\nconst keyboard = InlineKeyboard.from(array)\n```\n\nBe sure to to check the\n[documentation](https://grammy.dev/plugins/keyboard.html#inline-keyboards) on\ninline keyboards in grammY."
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": {
            "doc": "Initialize a new `InlineKeyboard` with an optional two-dimensional array\nof `InlineKeyboardButton` objects. This is the nested array that holds\nthe inline keyboard. It will be extended every time you call one of the\nprovided methods.\n",
            "tags": [
              {
                "kind": "param",
                "name": "inline_keyboard",
                "doc": "An optional initial two-dimensional button array"
              }
            ]
          },
          "accessibility": null,
          "hasBody": true,
          "name": "constructor",
          "params": [
            {
              "accessibility": "public",
              "kind": "assign",
              "left": {
                "kind": "identifier",
                "name": "inline_keyboard",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "InlineKeyboardButton",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InlineKeyboardButton"
                      }
                    }
                  }
                }
              },
              "right": "[UNSUPPORTED]",
              "tsType": null,
              "readonly": true
            }
          ],
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 528,
            "col": 2
          }
        }
      ],
      "properties": [],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": {
            "doc": "Allows you to add your own `InlineKeyboardButton` objects if you already\nhave them for some reason. You most likely want to call one of the other\nmethods.\n",
            "tags": [
              {
                "kind": "param",
                "name": "buttons",
                "doc": "The buttons to add"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "add",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "buttons",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "InlineKeyboardButton",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "InlineKeyboardButton"
                    }
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 538,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Adds a 'line break'. Call this method to make sure that the next added\nbuttons will be on a new row.\n\nYou may pass a number of `InlineKeyboardButton` objects if you already\nhave the instances for some reason. You most likely don't want to pass\nany arguments to `row`.\n",
            "tags": [
              {
                "kind": "param",
                "name": "buttons",
                "doc": "A number of buttons to add to the next row"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "row",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "buttons",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "InlineKeyboardButton",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "InlineKeyboardButton"
                    }
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 552,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Adds a new URL button. Telegram clients will open the provided URL when\nthe button is pressed.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "url",
                "doc": "HTTP or tg:// url to be opened when the button is pressed. Links tg://user?id=<user_id> can be used to mention a user by their ID without using a username, if this is allowed by their privacy settings."
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "url",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "url",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 563,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new URL button. Telegram clients will open the provided URL\nwhen the button is pressed.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "url",
                "doc": "HTTP or tg:// url to be opened when the button is pressed. Links tg://user?id=<user_id> can be used to mention a user by their ID without using a username, if this is allowed by their privacy settings."
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "url",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "url",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "InlineKeyboardButton.UrlButton",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "InlineKeyboardButton.UrlButton"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 573,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Adds a new callback query button. The button contains a text and a custom\npayload. This payload will be sent back to your bot when the button is\npressed. If you omit the payload, the display text will be sent back to\nyour bot.\n\nYour bot will receive an update every time a user presses any of the text\nbuttons. You can listen to these updates like this:\n```ts\n// Specific buttons:\nbot.callbackQuery('button-data', ctx => { ... })\n// Any button of any inline keyboard:\nbot.on('callback_query:data',    ctx => { ... })\n```\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "data",
                "doc": "The callback data to send back to your bot (default = text)"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "text",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "data",
                  "optional": false,
                  "tsType": null
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 594,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new callback query button. The button contains a text and a\ncustom payload. This payload will be sent back to your bot when the\nbutton is pressed. If you omit the payload, the display text will be sent\nback to your bot.\n\nYour bot will receive an update every time a user presses any of the text\nbuttons. You can listen to these updates like this:\n```ts\n// Specific buttons:\nbot.callbackQuery('button-data', ctx => { ... })\n// Any button of any inline keyboard:\nbot.on('callback_query:data',    ctx => { ... })\n```\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "data",
                "doc": "The callback data to send back to your bot (default = text)"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "text",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "data",
                  "optional": false,
                  "tsType": null
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": {
              "repr": "InlineKeyboardButton.CallbackButton",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "InlineKeyboardButton.CallbackButton"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 615,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Adds a new web app button, confer https://core.telegram.org/bots/webapps\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "url",
                "doc": "An HTTPS URL of a Web App to be opened with additional data"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "webApp",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "url",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 627,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new web app button, confer https://core.telegram.org/bots/webapps\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "url",
                "doc": "An HTTPS URL of a Web App to be opened with additional data"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "webApp",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "url",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "InlineKeyboardButton.WebAppButton",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "InlineKeyboardButton.WebAppButton"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 636,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Adds a new login button. This can be used as a replacement for the\nTelegram Login Widget. You must specify an HTTPS URL used to\nautomatically authorize the user.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "loginUrl",
                "doc": "The login URL as string or `LoginUrl` object"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "login",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "loginUrl",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "LoginUrl",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "LoginUrl"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 650,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new login button. This can be used as a replacement for the\nTelegram Login Widget. You must specify an HTTPS URL used to\nautomatically authorize the user.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "loginUrl",
                "doc": "The login URL as string or `LoginUrl` object"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "login",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "loginUrl",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "LoginUrl",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "LoginUrl"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "InlineKeyboardButton.LoginButton",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "InlineKeyboardButton.LoginButton"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 661,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Adds a new inline query button. Telegram clients will let the user pick a\nchat when this button is pressed. This will start an inline query. The\nselected chat will be prefilled with the name of your bot. You may\nprovide a text that is specified along with it.\n\nYour bot will in turn receive updates for inline queries. You can listen\nto inline query updates like this:\n```ts\nbot.on('inline_query', ctx => { ... })\n```\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "query",
                "doc": "The (optional) inline query string to prefill"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "switchInline",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "query",
                  "optional": false,
                  "tsType": null
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 685,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new inline query button. Telegram clients will let the user pick a\nchat when this button is pressed. This will start an inline query. The\nselected chat will be prefilled with the name of your bot. You may\nprovide a text that is specified along with it.\n\nYour bot will in turn receive updates for inline queries. You can listen\nto inline query updates like this:\n```ts\nbot.on('inline_query', ctx => { ... })\n```\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "query",
                "doc": "The (optional) inline query string to prefill"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "switchInline",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "query",
                  "optional": false,
                  "tsType": null
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": {
              "repr": "InlineKeyboardButton.SwitchInlineButton",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "InlineKeyboardButton.SwitchInlineButton"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 703,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Adds a new inline query button that acts on the current chat. The\nselected chat will be prefilled with the name of your bot. You may\nprovide a text that is specified along with it. This will start an inline\nquery.\n\nYour bot will in turn receive updates for inline queries. You can listen\nto inline query updates like this:\n```ts\nbot.on('inline_query', ctx => { ... })\n```\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "query",
                "doc": "The (optional) inline query string to prefill"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "switchInlineCurrent",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "query",
                  "optional": false,
                  "tsType": null
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 724,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new inline query button that acts on the current chat. The\nselected chat will be prefilled with the name of your bot. You may\nprovide a text that is specified along with it. This will start an inline\nquery.\n\nYour bot will in turn receive updates for inline queries. You can listen\nto inline query updates like this:\n```ts\nbot.on('inline_query', ctx => { ... })\n```\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "query",
                "doc": "The (optional) inline query string to prefill"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "switchInlineCurrent",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "query",
                  "optional": false,
                  "tsType": null
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": {
              "repr": "InlineKeyboardButton.SwitchInlineCurrentChatButton",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "InlineKeyboardButton.SwitchInlineCurrentChatButton"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 742,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Adds a new inline query button. Telegram clients will let the user pick a\nchat when this button is pressed. This will start an inline query. The\nselected chat will be prefilled with the name of your bot. You may\nprovide a text that is specified along with it.\n\nYour bot will in turn receive updates for inline queries. You can listen\nto inline query updates like this:\n```ts\nbot.on('inline_query', ctx => { ... })\n```\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "query",
                "doc": "The query object describing which chats can be picked"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "switchInlineChosen",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "query",
                  "optional": false,
                  "tsType": {
                    "repr": "SwitchInlineQueryChosenChat",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "SwitchInlineQueryChosenChat"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 763,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new inline query button. Telegram clients will let the user pick a\nchat when this button is pressed. This will start an inline query. The\nselected chat will be prefilled with the name of your bot. You may\nprovide a text that is specified along with it.\n\nYour bot will in turn receive updates for inline queries. You can listen\nto inline query updates like this:\n```ts\nbot.on('inline_query', ctx => { ... })\n```\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              },
              {
                "kind": "param",
                "name": "query",
                "doc": "The query object describing which chats can be picked"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "switchInlineChosen",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "query",
                  "optional": false,
                  "tsType": {
                    "repr": "SwitchInlineQueryChosenChat",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "SwitchInlineQueryChosenChat"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": {
              "repr": "InlineKeyboardButton.SwitchInlineChosenChatButton",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "InlineKeyboardButton.SwitchInlineChosenChatButton"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 784,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Adds a new game query button, confer\nhttps://core.telegram.org/bots/api#games\n\nThis type of button must always be the first button in the first row.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "game",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 798,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new game query button, confer\nhttps://core.telegram.org/bots/api#games\n\nThis type of button must always be the first button in the first row.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "game",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "InlineKeyboardButton.GameButton",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "InlineKeyboardButton.GameButton"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 809,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Adds a new payment button, confer\nhttps://core.telegram.org/bots/api#payments\n\nThis type of button must always be the first button in the first row and\ncan only be used in invoice messages.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "pay",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 821,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Create a new payment button, confer\nhttps://core.telegram.org/bots/api#payments\n\nThis type of button must always be the first button in the first row and\ncan only be used in invoice messages.\n",
            "tags": [
              {
                "kind": "param",
                "name": "text",
                "doc": "The text to display"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "pay",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "text",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "InlineKeyboardButton.PayButton",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "InlineKeyboardButton.PayButton"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 833,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new inline keyboard that contains the transposed grid of\nbuttons of this inline keyboard. This means that the resulting inline\nkeyboard has the rows and columns flipped.\n\nNote that inline buttons can only span multiple columns, but never\nmultiple rows. This means that if the given arrays have different\nlengths, some buttons might flow up in the layout. In these cases,\ntransposing an inline keyboard a second time will not undo the first\ntransposition.\n\nHere are some examples.\n\n```\noriginal    transposed\n[  a  ]  ~> [  a  ]\n\n            [  a  ]\n[a b c]  ~> [  b  ]\n            [  c  ]\n\n[ a b ]     [a c e]\n[ c d ]  ~> [ b d ]\n[  e  ]\n\n[ a b ]     [a c d]\n[  c  ]  ~> [ b e ]\n[d e f]     [  f  ]\n```"
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "toTransposed",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 866,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates a new inline keyboard with the same buttons but reflowed into a\ngiven number of columns as if the buttons were text elements. Optionally,\nyou can specify if the flow should make sure to fill up the last row.\n\nThis method is idempotent, so calling it a second time will effectively\nclone this inline keyboard without reordering the buttons.\n\nHere are some examples.\n\n```\noriginal    flowed\n[  a  ]  ~> [  a  ]    (4 columns)\n\n            [  a  ]\n[a b c]  ~> [  b  ]    (1 column)\n            [  c  ]\n\n[ a b ]     [a b c]\n[ c d ]  ~> [ d e ]    (3 columns)\n[  e  ]\n\n[ a b ]     [abcde]\n[  c  ]  ~> [  f  ]    (5 columns)\n[d e f]\n\n[a b c]     [  a  ]\n[d e f]  ~> [b c d]    (3 colums, { fillLastRow: true })\n[g h i]     [e f g]\n[  j  ]     [h i j]\n```\n",
            "tags": [
              {
                "kind": "param",
                "name": "columns",
                "doc": "Maximum number of buttons per row"
              },
              {
                "kind": "param",
                "name": "options",
                "doc": "Optional flowing behavior"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "toFlowed",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "columns",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "FlowOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "FlowOptions"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 906,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Creates and returns a deep copy of this inline keyboard."
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "clone",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 914,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Appends the buttons of the given inline keyboards to this keyboard.\n",
            "tags": [
              {
                "kind": "param",
                "name": "sources",
                "doc": "A number of inline keyboards to append"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "append",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "rest",
                "arg": {
                  "kind": "identifier",
                  "name": "sources",
                  "optional": false,
                  "tsType": null
                },
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "InlineKeyboardSource",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "InlineKeyboardSource"
                    }
                  }
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 924,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "doc": "Turns a two-dimensional inline button array into an inline keyboard\ninstance. You can use the static button builder methods to create inline\nbutton objects.\n",
            "tags": [
              {
                "kind": "param",
                "name": "source",
                "doc": "A two-dimensional inline button array"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "from",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "source",
                "optional": false,
                "tsType": {
                  "repr": "InlineKeyboardSource",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "InlineKeyboardSource"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "InlineKeyboard",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "InlineKeyboard"
              }
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/keyboard.ts",
            "line": 940,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "SessionFlavor",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
      "line": 20,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "A session flavor is a context flavor that holds session data under\n`ctx.session`.\n\nSession middleware will load the session data of a specific chat from your\nstorage solution, and make it available to you on the context object. Check\nout the\n[documentation](https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/session)\non session middleware to know more, and read the section about sessions on\nthe [website](https://grammy.dev/plugins/session.html)."
    },
    "interfaceDef": {
      "extends": [],
      "methods": [
        {
          "name": "session",
          "kind": "getter",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 34,
            "col": 2
          },
          "jsDoc": {
            "doc": "Session data on the context object.\n\n**WARNING:** You have to make sure that your session data is not\nundefined by _providing an initial value to the session middleware_, or by\nmaking sure that `ctx.session` is assigned if it is empty! The type\nsystem does not include `| undefined` because this is really annoying to\nwork with.\n\n Accessing `ctx.session` by reading or writing will throw if\n`getSessionKey(ctx) === undefined` for the respective context object\n`ctx`."
          },
          "optional": false,
          "params": [],
          "returnType": {
            "repr": "S",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "S"
            }
          },
          "typeParams": []
        },
        {
          "name": "session",
          "kind": "setter",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 35,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "session",
              "optional": false,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "S",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "S"
                    }
                  },
                  {
                    "repr": "null",
                    "kind": "keyword",
                    "keyword": "null"
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              }
            }
          ],
          "returnType": null,
          "typeParams": []
        }
      ],
      "properties": [],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": [
        {
          "name": "S"
        }
      ]
    }
  },
  {
    "kind": "interface",
    "name": "LazySessionFlavor",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
      "line": 50,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "A lazy session flavor is a context flavor that holds a promise of some\nsession data under `ctx.session`.\n\nLazy session middleware will provide this promise lazily on the context\nobject. Once you access `ctx.session`, the storage will be queried and the\nsession data becomes available. If you access `ctx.session` again for the\nsame context object, the cached value will be used. Check out the\n[documentation](https://doc.deno.land/https://deno.land/x/grammy/mod.ts/~/lazySession)\non lazy session middleware to know more, and read the section about lazy\nsessions on the\n[website](https://grammy.dev/plugins/session.html#lazy-sessions)."
    },
    "interfaceDef": {
      "extends": [],
      "methods": [
        {
          "name": "session",
          "kind": "getter",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 64,
            "col": 2
          },
          "jsDoc": {
            "doc": "Session data on the context object, potentially a promise.\n\n**WARNING:** You have to make sure that your session data is not\nundefined by _providing a default value to the session middleware_, or by\nmaking sure that `ctx.session` is assigned if it is empty! The type\nsystem does not include `| undefined` because this is really annoying to\nwork with.\n\nAccessing `ctx.session` by reading or writing will throw iff\n`getSessionKey(ctx) === undefined` holds for the respective context\nobject `ctx`."
          },
          "optional": false,
          "params": [],
          "returnType": {
            "repr": "MaybePromise",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "S",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "S"
                  }
                }
              ],
              "typeName": "MaybePromise"
            }
          },
          "typeParams": []
        },
        {
          "name": "session",
          "kind": "setter",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 65,
            "col": 2
          },
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "session",
              "optional": false,
              "tsType": {
                "repr": "MaybePromise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "S",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "S"
                          }
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  ],
                  "typeName": "MaybePromise"
                }
              }
            }
          ],
          "returnType": null,
          "typeParams": []
        }
      ],
      "properties": [],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": [
        {
          "name": "S"
        }
      ]
    }
  },
  {
    "kind": "interface",
    "name": "StorageAdapter",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
      "line": 74,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "A storage adapter is an abstraction that provides read, write, and delete\naccess to a storage solution of any kind. Storage adapters are used to keep\nsession middleware independent of your database provider, and they allow you\nto pass your own storage solution."
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "read",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 79,
            "col": 2
          },
          "jsDoc": {
            "doc": "Reads a value for the given key from the storage. May return the value or\nundefined, or a promise of either."
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "MaybePromise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  ],
                  "typeName": "MaybePromise"
                }
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "key",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "typeParams": []
            }
          },
          "typeParams": []
        },
        {
          "name": "write",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 83,
            "col": 2
          },
          "jsDoc": {
            "doc": "Writes a value for the given key to the storage."
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "MaybePromise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    }
                  ],
                  "typeName": "MaybePromise"
                }
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "key",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "value",
                  "optional": false,
                  "tsType": {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  }
                }
              ],
              "typeParams": []
            }
          },
          "typeParams": []
        },
        {
          "name": "delete",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 87,
            "col": 2
          },
          "jsDoc": {
            "doc": "Deletes a value for the given key from the storage."
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "MaybePromise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    }
                  ],
                  "typeName": "MaybePromise"
                }
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "key",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "typeParams": []
            }
          },
          "typeParams": []
        },
        {
          "name": "has",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 91,
            "col": 2
          },
          "jsDoc": {
            "doc": "Checks whether a key exists in the storage."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "MaybePromise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    }
                  ],
                  "typeName": "MaybePromise"
                }
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "key",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "typeParams": []
            }
          },
          "typeParams": []
        },
        {
          "name": "readAllKeys",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 95,
            "col": 2
          },
          "jsDoc": {
            "doc": "Lists all keys."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Iterable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      ],
                      "typeName": "Iterable"
                    }
                  },
                  {
                    "repr": "AsyncIterable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      ],
                      "typeName": "AsyncIterable"
                    }
                  }
                ]
              },
              "params": [],
              "typeParams": []
            }
          },
          "typeParams": []
        },
        {
          "name": "readAllValues",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 99,
            "col": 2
          },
          "jsDoc": {
            "doc": "Lists all values."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Iterable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        }
                      ],
                      "typeName": "Iterable"
                    }
                  },
                  {
                    "repr": "AsyncIterable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        }
                      ],
                      "typeName": "AsyncIterable"
                    }
                  }
                ]
              },
              "params": [],
              "typeParams": []
            }
          },
          "typeParams": []
        },
        {
          "name": "readAllEntries",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 103,
            "col": 2
          },
          "jsDoc": {
            "doc": "Lists all keys with their values."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Iterable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "",
                          "kind": "tuple",
                          "tuple": [
                            {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            },
                            {
                              "repr": "T",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "T"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": "Iterable"
                    }
                  },
                  {
                    "repr": "AsyncIterable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "",
                          "kind": "tuple",
                          "tuple": [
                            {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            },
                            {
                              "repr": "T",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "T"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": "AsyncIterable"
                    }
                  }
                ]
              },
              "params": [],
              "typeParams": []
            }
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": [
        {
          "name": "T"
        }
      ]
    }
  },
  {
    "kind": "interface",
    "name": "SessionOptions",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
      "line": 111,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Options for session middleware."
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "type",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 112,
            "col": 2
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "single",
            "kind": "literal",
            "literal": {
              "kind": "string",
              "string": "single"
            }
          },
          "typeParams": []
        },
        {
          "name": "initial",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 122,
            "col": 2
          },
          "jsDoc": {
            "doc": "**Recommended to use.**\n\nA function that produces an initial value for `ctx.session`. This\nfunction will be called every time the storage solution returns undefined\nfor a given session key. Make sure to create a new value every time, such\nthat different context objects do that accidentally share the same\nsession data."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "S",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "S"
                }
              },
              "params": [],
              "typeParams": []
            }
          },
          "typeParams": []
        },
        {
          "name": "getSessionKey",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 134,
            "col": 2
          },
          "jsDoc": {
            "doc": "This option lets you generate your own session keys per context object.\nThe session key determines how to map the different session objects to\nyour chats and users. Check out the\n[documentation](https://grammy.dev/plugins/session.html#how-to-use-sessions)\non the website about how to use session middleware to know how session\nkeys are used.\n\nThe default implementation will store sessions per chat, as determined by\n`ctx.chat?.id`."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "MaybePromise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  ],
                  "typeName": "MaybePromise"
                }
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "ctx",
                  "optional": false,
                  "tsType": {
                    "repr": "Omit",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "C",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "C"
                          }
                        },
                        {
                          "repr": "session",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "session"
                          }
                        }
                      ],
                      "typeName": "Omit"
                    }
                  }
                }
              ],
              "typeParams": []
            }
          },
          "typeParams": []
        },
        {
          "name": "storage",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 148,
            "col": 2
          },
          "jsDoc": {
            "doc": "A storage adapter to your storage solution. Provides read, write, and\ndelete access to the session middleware.\n\nConsider using a [known storage\nadapter](https://grammy.dev/plugins/session.html#known-storage-adapters)\ninstead of rolling your own implementation of this.\n\nThe default implementation will store session in memory. The data will be\nlost whenever your bot restarts."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "StorageAdapter",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "S",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "S"
                  }
                }
              ],
              "typeName": "StorageAdapter"
            }
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": [
        {
          "name": "S"
        },
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          },
          "default": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "typeAlias",
    "name": "MultiSessionOptions",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
      "line": 155,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Options for session middleware if multi sessions are used. Specify `\"type\":\n\"multi\"` in the options to use multi sessions."
    },
    "typeAliasDef": {
      "tsType": {
        "repr": "",
        "kind": "conditional",
        "conditionalType": {
          "checkType": {
            "repr": "S",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "S"
            }
          },
          "extendsType": {
            "repr": "Record",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              ],
              "typeName": "Record"
            }
          },
          "trueType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "methods": [],
                  "properties": [
                    {
                      "name": "type",
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "multi",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "multi"
                        }
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              },
              {
                "repr": "MultiSessionOptionsRecord",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "S",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "S"
                      }
                    },
                    {
                      "repr": "C",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "C"
                      }
                    }
                  ],
                  "typeName": "MultiSessionOptionsRecord"
                }
              }
            ]
          },
          "falseType": {
            "repr": "never",
            "kind": "keyword",
            "keyword": "never"
          }
        }
      },
      "typeParams": [
        {
          "name": "S"
        },
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "function",
    "name": "session",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
      "line": 214,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Session middleware provides a persistent data storage for your bot. You can\nuse it to let your bot remember any data you want, for example the messages\nit sent or received in the past. This is done by attaching _session data_ to\nevery chat. The stored data is then provided on the context object under\n`ctx.session`.\n\n> **What is a session?** Simply put, the session of a chat is a little\n> persistent storage that is attached to it. As an example, your bot can send\n> a message to a chat and store the ID of that message in the corresponding\n> session. The next time your bot receives an update from that chat, the\n> session will still contain that ID.\n>\n> Session data can be stored in a database, in a file, or simply in memory.\n> grammY only supports memory sessions out of the box, but you can use\n> third-party session middleware to connect to other storage solutions. Note\n> that memory sessions will be lost when you stop your bot and the process\n> exits, so they are usually not useful in production.\n\nWhenever your bot receives an update, the first thing the session middleware\nwill do is to load the correct session from your storage solution. This\nobject is then provided on `ctx.session` while your other middleware is\nrunning. As soon as your bot is done handling the update, the middleware\ntakes over again and writes back the session object to your storage. This\nallows you to modify the session object arbitrarily in your middleware, and\nto stop worrying about the database.\n\n```ts\nbot.use(session())\n\nbot.on('message', ctx => {\n  // The session object is persisted across updates!\n  const session = ctx.session\n})\n```\n\nIt is recommended to make use of the `initial` option in the configuration\nobject, which correctly initializes session objects for new chats.\n\nYou can delete the session data by setting `ctx.session` to `null` or\n`undefined`.\n\nCheck out the [documentation](https://grammy.dev/plugins/session.html) on the\nwebsite to know more about how sessions work in grammY.\n",
      "tags": [
        {
          "kind": "param",
          "name": "options",
          "doc": "Optional configuration to pass to the session middleware"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "assign",
          "left": {
            "kind": "identifier",
            "name": "options",
            "optional": false,
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "SessionOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "S",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "S"
                        }
                      },
                      {
                        "repr": "C",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "C"
                        }
                      }
                    ],
                    "typeName": "SessionOptions"
                  }
                },
                {
                  "repr": "MultiSessionOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "S",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "S"
                        }
                      },
                      {
                        "repr": "C",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "C"
                        }
                      }
                    ],
                    "typeName": "MultiSessionOptions"
                  }
                }
              ]
            }
          },
          "right": "[UNSUPPORTED]",
          "tsType": null
        }
      ],
      "returnType": {
        "repr": "MiddlewareFn",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "",
              "kind": "intersection",
              "intersection": [
                {
                  "repr": "C",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "C"
                  }
                },
                {
                  "repr": "SessionFlavor",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "S",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "S"
                        }
                      }
                    ],
                    "typeName": "SessionFlavor"
                  }
                }
              ]
            }
          ],
          "typeName": "MiddlewareFn"
        }
      },
      "hasBody": true,
      "isAsync": false,
      "isGenerator": false,
      "typeParams": [
        {
          "name": "S"
        },
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "function",
    "name": "lazySession",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
      "line": 299,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "> This is an advanced function of grammY.\n\nGenerally speaking, lazy sessions work just like normal sessions—just they\nare loaded on demand. Except for a few `async`s and `await`s here and there,\ntheir usage looks 100 % identical.\n\nInstead of directly querying the storage every time an update arrives, lazy\nsessions quickly do this _once you access_ `ctx.session`. This can\nsignificantly reduce the database traffic (especially when your bot is added\nto group chats), because it skips a read and a wrote operation for all\nupdates that the bot does not react to.\n\n```ts\n// The options are identical\nbot.use(lazySession({ storage: ... }))\n\nbot.on('message', async ctx => {\n  // The session object is persisted across updates!\n  const session = await ctx.session\n  //                        ^\n  //                        |\n  //                       This plain property access (no function call) will trigger the database query!\n})\n```\n\nCheck out the\n[documentation](https://grammy.dev/plugins/session.html#lazy-sessions) on the\nwebsite to know more about how lazy sessions work in grammY.\n",
      "tags": [
        {
          "kind": "param",
          "name": "options",
          "doc": "Optional configuration to pass to the session middleware"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "assign",
          "left": {
            "kind": "identifier",
            "name": "options",
            "optional": false,
            "tsType": {
              "repr": "SessionOptions",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "S",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "S"
                    }
                  },
                  {
                    "repr": "C",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "C"
                    }
                  }
                ],
                "typeName": "SessionOptions"
              }
            }
          },
          "right": "[UNSUPPORTED]",
          "tsType": null
        }
      ],
      "returnType": {
        "repr": "MiddlewareFn",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "",
              "kind": "intersection",
              "intersection": [
                {
                  "repr": "C",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "C"
                  }
                },
                {
                  "repr": "LazySessionFlavor",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "S",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "S"
                        }
                      }
                    ],
                    "typeName": "LazySessionFlavor"
                  }
                }
              ]
            }
          ],
          "typeName": "MiddlewareFn"
        }
      },
      "hasBody": true,
      "isAsync": false,
      "isGenerator": false,
      "typeParams": [
        {
          "name": "S"
        },
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "interface",
    "name": "Enhance",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
      "line": 466,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "When enhancing a storage adapter, it needs to be able to store additional\ninformation. It does this by wrapping the actual data inside an object, and\nadding more properties to this wrapper.\n\nThis interface defines the additional properties that need to be stored by a\nstorage adapter that supports enhanced sessions."
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "v",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 468,
            "col": 2
          },
          "jsDoc": {
            "doc": "Version"
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "typeParams": []
        },
        {
          "name": "__d",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 470,
            "col": 2
          },
          "jsDoc": {
            "doc": "Data"
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "T",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "T"
            }
          },
          "typeParams": []
        },
        {
          "name": "e",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 472,
            "col": 2
          },
          "jsDoc": {
            "doc": "Expiry date"
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": [
        {
          "name": "T"
        }
      ]
    }
  },
  {
    "kind": "interface",
    "name": "MigrationOptions",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
      "line": 479,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Options for enhanced sessions"
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "storage",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 481,
            "col": 2
          },
          "jsDoc": {
            "doc": "The original storage adapter that will be enhanced"
          },
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "StorageAdapter",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "Enhance",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      }
                    ],
                    "typeName": "Enhance"
                  }
                }
              ],
              "typeName": "StorageAdapter"
            }
          },
          "typeParams": []
        },
        {
          "name": "migrations",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 487,
            "col": 2
          },
          "jsDoc": {
            "doc": "A set of session migrations, defined as an object mapping from version\nnumbers to migration functions that transform data to the respective\nversion."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "Migrations",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Migrations"
            }
          },
          "typeParams": []
        },
        {
          "name": "millisecondsToLive",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 492,
            "col": 2
          },
          "jsDoc": {
            "doc": "Number of milliseconds after the last write operation until the session\ndata expires."
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": [
        {
          "name": "T"
        }
      ]
    }
  },
  {
    "kind": "interface",
    "name": "Migrations",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
      "line": 507,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "A mapping from version numbers to session migration functions. Each entry in\nthis object has a version number as a key, and a function as a value.\n\nFor a key `n`, the respective value should be a function that takes the\nprevious session data and migrates it to conform with the data that is used\nby version `n`. The previous session data is defined by the next key less\nthan `n`, such as `n-1`. Versions don't have to be integers, nor do all\nversions have to be adjacent. For example, you can use `[1, 1.5, 4]` as\nversions. If `n` is the lowest value in the set of keys, the function stored\nfor `n` can be used to migrate session data that was stored before migrations\nwere used."
    },
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [],
      "callSignatures": [],
      "indexSignatures": [
        {
          "readonly": false,
          "params": [
            {
              "kind": "identifier",
              "name": "version",
              "optional": false,
              "tsType": {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              }
            }
          ],
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "any",
                "kind": "keyword",
                "keyword": "any"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "old",
                  "optional": false,
                  "tsType": {
                    "repr": "any",
                    "kind": "keyword",
                    "keyword": "any"
                  }
                }
              ],
              "typeParams": []
            }
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 509,
            "col": 2
          }
        }
      ],
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "enhanceStorage",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
      "line": 527,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "You can use this function to transform an existing storage adapter, and add\nmore features to it. Currently, you can add session migrations and expiry\ndates.\n\nYou can use this function like so:\n```ts\nconst storage = ... // define your storage adapter\nconst enhanced = enhanceStorage({ storage, millisecondsToLive: 500 })\nbot.use(session({ storage: enhanced }))\n```\n",
      "tags": [
        {
          "kind": "param",
          "name": "options",
          "doc": "Session enhancing options"
        },
        {
          "kind": "return",
          "doc": "The enhanced storage adapter"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "options",
          "optional": false,
          "tsType": {
            "repr": "MigrationOptions",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "T",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "T"
                  }
                }
              ],
              "typeName": "MigrationOptions"
            }
          }
        }
      ],
      "returnType": {
        "repr": "StorageAdapter",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "T",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "T"
              }
            }
          ],
          "typeName": "StorageAdapter"
        }
      },
      "hasBody": true,
      "isAsync": false,
      "isGenerator": false,
      "typeParams": [
        {
          "name": "T"
        }
      ]
    }
  },
  {
    "kind": "class",
    "name": "MemorySessionStorage",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
      "line": 641,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "The memory session storage is a built-in storage adapter that saves your\nsession data in RAM using a regular JavaScript `Map` object. If you use this\nstorage adapter, all sessions will be lost when your process terminates or\nrestarts. Hence, you should only use it for short-lived data that is not\nimportant to persist.\n\nThis class is used as default if you do not provide a storage adapter, e.g.\nto your database.\n\nThis storage adapter features expiring sessions. When instantiating this class\nyourself, you can pass a time to live in milliseconds that will be used for\neach session object. If a session for a user expired, the session data will\nbe discarded on its first read, and a fresh session object as returned by the\n`initial` option (or undefined) will be put into place."
    },
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": {
            "doc": "Constructs a new memory session storage with the given time to live. Note\nthat this storage adapter will not store your data permanently.\n",
            "tags": [
              {
                "kind": "param",
                "name": "timeToLive",
                "doc": "TTL in milliseconds, default is `Infinity`"
              }
            ]
          },
          "accessibility": null,
          "hasBody": true,
          "name": "constructor",
          "params": [
            {
              "accessibility": "private",
              "kind": "identifier",
              "name": "timeToLive",
              "optional": true,
              "tsType": {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              },
              "readonly": true
            }
          ],
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 656,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": {
            "doc": "Internally used `Map` instance that stores the session data"
          },
          "tsType": {
            "repr": "Map",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "session",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "S",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "S"
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "expires",
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                }
              ],
              "typeName": "Map"
            }
          },
          "readonly": true,
          "accessibility": "protected",
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "storage",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 645,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "read",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "key",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 658,
            "col": 2
          }
        },
        {
          "jsDoc": {
            "tags": [
              {
                "kind": "deprecated",
                "doc": "Use {@link readAllValues} instead"
              }
            ]
          },
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "readAll",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 671,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "readAllKeys",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 675,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "readAllValues",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 679,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "readAllEntries",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 686,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "has",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "key",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": null,
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 692,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "write",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "key",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "S",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "S"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 696,
            "col": 2
          }
        },
        {
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "delete",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "key",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "hasBody": true,
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/session.ts",
            "line": 700,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [
        {
          "repr": "StorageAdapter",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "S",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "S"
                }
              }
            ],
            "typeName": "StorageAdapter"
          }
        }
      ],
      "typeParams": [
        {
          "name": "S"
        }
      ],
      "superTypeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "WebhookOptions",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/webhook.ts",
      "line": 27,
      "col": 0
    },
    "declarationKind": "export",
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "onTimeout",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/webhook.ts",
            "line": 29,
            "col": 2
          },
          "jsDoc": {
            "doc": "An optional strategy to handle timeouts (default: 'throw')"
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "throw",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "throw"
                }
              },
              {
                "repr": "return",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "return"
                }
              },
              {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "unknown",
                      "kind": "keyword",
                      "keyword": "unknown"
                    },
                    "params": [
                      {
                        "kind": "rest",
                        "arg": {
                          "kind": "identifier",
                          "name": "args",
                          "optional": false,
                          "tsType": null
                        },
                        "tsType": {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "any",
                            "kind": "keyword",
                            "keyword": "any"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              }
            ]
          },
          "typeParams": []
        },
        {
          "name": "timeoutMilliseconds",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/webhook.ts",
            "line": 31,
            "col": 2
          },
          "jsDoc": {
            "doc": "An optional number of timeout milliseconds (default: 10_000)"
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "typeParams": []
        },
        {
          "name": "secretToken",
          "location": {
            "filename": "file:///home/roj/Projects/grammY/src/convenience/webhook.ts",
            "line": 33,
            "col": 2
          },
          "jsDoc": {
            "doc": "An optional string to compare to X-Telegram-Bot-Api-Secret-Token"
          },
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "webhookCallback",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/webhook.ts",
      "line": 55,
      "col": 0
    },
    "declarationKind": "export",
    "jsDoc": {
      "doc": "Creates a callback function that you can pass to a web framework (such as\nexpress) if you want to run your bot via webhooks. Use it like this:\n```ts\nconst app = express() // or whatever you're using\nconst bot = new Bot('<token>')\n\napp.use(webhookCallback(bot, 'express'))\n```\n\nConfer the grammY\n[documentation](https://grammy.dev/guide/deployment-types.html) to read more\nabout how to run your bot with webhooks.\n",
      "tags": [
        {
          "kind": "param",
          "name": "bot",
          "doc": "The bot for which to create a callback"
        },
        {
          "kind": "param",
          "name": "adapter",
          "doc": "An optional string identifying the framework (default: 'express')"
        },
        {
          "kind": "param",
          "name": "onTimeout",
          "doc": "An optional strategy to handle timeouts (default: 'throw')"
        },
        {
          "kind": "param",
          "name": "timeoutMilliseconds",
          "doc": "An optional number of timeout milliseconds (default: 10_000)"
        }
      ]
    },
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "bot",
          "optional": false,
          "tsType": {
            "repr": "Bot",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "C",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "C"
                  }
                }
              ],
              "typeName": "Bot"
            }
          }
        },
        {
          "kind": "identifier",
          "name": "adapter",
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "SupportedFrameworks",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "SupportedFrameworks"
                }
              },
              {
                "repr": "FrameworkAdapter",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "FrameworkAdapter"
                }
              }
            ]
          }
        },
        {
          "kind": "identifier",
          "name": "onTimeout",
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "indexedAccess",
            "indexedAccess": {
              "readonly": false,
              "objType": {
                "repr": "WebhookOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WebhookOptions"
                }
              },
              "indexType": {
                "repr": "onTimeout",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "onTimeout"
                }
              }
            }
          }
        },
        {
          "kind": "identifier",
          "name": "timeoutMilliseconds",
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "indexedAccess",
            "indexedAccess": {
              "readonly": false,
              "objType": {
                "repr": "WebhookOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WebhookOptions"
                }
              },
              "indexType": {
                "repr": "timeoutMilliseconds",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "timeoutMilliseconds"
                }
              }
            }
          }
        },
        {
          "kind": "identifier",
          "name": "secretToken",
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "indexedAccess",
            "indexedAccess": {
              "readonly": false,
              "objType": {
                "repr": "WebhookOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WebhookOptions"
                }
              },
              "indexType": {
                "repr": "secretToken",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "secretToken"
                }
              }
            }
          }
        }
      ],
      "returnType": {
        "repr": "",
        "kind": "fnOrConstructor",
        "fnOrConstructor": {
          "constructor": false,
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          },
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "args",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "typeParams": []
        }
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          },
          "default": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "function",
    "name": "webhookCallback",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/webhook.ts",
      "line": 62,
      "col": 0
    },
    "declarationKind": "export",
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "bot",
          "optional": false,
          "tsType": {
            "repr": "Bot",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "C",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "C"
                  }
                }
              ],
              "typeName": "Bot"
            }
          }
        },
        {
          "kind": "identifier",
          "name": "adapter",
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "SupportedFrameworks",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "SupportedFrameworks"
                }
              },
              {
                "repr": "FrameworkAdapter",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "FrameworkAdapter"
                }
              }
            ]
          }
        },
        {
          "kind": "identifier",
          "name": "webhookOptions",
          "optional": true,
          "tsType": {
            "repr": "WebhookOptions",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "WebhookOptions"
            }
          }
        }
      ],
      "returnType": {
        "repr": "",
        "kind": "fnOrConstructor",
        "fnOrConstructor": {
          "constructor": false,
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          },
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "args",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "typeParams": []
        }
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          },
          "default": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  },
  {
    "kind": "function",
    "name": "webhookCallback",
    "location": {
      "filename": "file:///home/roj/Projects/grammY/src/convenience/webhook.ts",
      "line": 67,
      "col": 0
    },
    "declarationKind": "export",
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "bot",
          "optional": false,
          "tsType": {
            "repr": "Bot",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "C",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "C"
                  }
                }
              ],
              "typeName": "Bot"
            }
          }
        },
        {
          "kind": "assign",
          "left": {
            "kind": "identifier",
            "name": "adapter",
            "optional": false,
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "SupportedFrameworks",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "SupportedFrameworks"
                  }
                },
                {
                  "repr": "FrameworkAdapter",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "FrameworkAdapter"
                  }
                }
              ]
            }
          },
          "right": "[UNSUPPORTED]",
          "tsType": null
        },
        {
          "kind": "assign",
          "left": {
            "kind": "identifier",
            "name": "onTimeout",
            "optional": false,
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "WebhookOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WebhookOptions"
                  }
                },
                {
                  "repr": "",
                  "kind": "indexedAccess",
                  "indexedAccess": {
                    "readonly": false,
                    "objType": {
                      "repr": "WebhookOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "WebhookOptions"
                      }
                    },
                    "indexType": {
                      "repr": "onTimeout",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "onTimeout"
                      }
                    }
                  }
                }
              ]
            }
          },
          "right": "[UNSUPPORTED]",
          "tsType": null
        },
        {
          "kind": "assign",
          "left": {
            "kind": "identifier",
            "name": "timeoutMilliseconds",
            "optional": false,
            "tsType": {
              "repr": "",
              "kind": "indexedAccess",
              "indexedAccess": {
                "readonly": false,
                "objType": {
                  "repr": "WebhookOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WebhookOptions"
                  }
                },
                "indexType": {
                  "repr": "timeoutMilliseconds",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "timeoutMilliseconds"
                  }
                }
              }
            }
          },
          "right": "[UNSUPPORTED]",
          "tsType": null
        },
        {
          "kind": "identifier",
          "name": "secretToken",
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "indexedAccess",
            "indexedAccess": {
              "readonly": false,
              "objType": {
                "repr": "WebhookOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WebhookOptions"
                }
              },
              "indexType": {
                "repr": "secretToken",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "secretToken"
                }
              }
            }
          }
        }
      ],
      "returnType": null,
      "hasBody": true,
      "isAsync": false,
      "isGenerator": false,
      "typeParams": [
        {
          "name": "C",
          "constraint": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          },
          "default": {
            "repr": "Context",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Context"
            }
          }
        }
      ]
    }
  }
]
